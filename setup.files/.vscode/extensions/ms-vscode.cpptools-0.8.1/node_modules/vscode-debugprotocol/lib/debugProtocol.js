/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdQcm90b2NvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWJ1Z1Byb3RvY29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHO0FBRWhHLFlBQVksQ0FBQztBQXcrQloiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogRGVjbGFyYXRpb24gbW9kdWxlIGRlc2NyaWJpbmcgdGhlIFZTIENvZGUgZGVidWcgcHJvdG9jb2xcbiAqL1xuZXhwb3J0IG1vZHVsZSBEZWJ1Z1Byb3RvY29sIHtcblxuXHQvKiogQmFzZSBjbGFzcyBvZiByZXF1ZXN0cywgcmVzcG9uc2VzLCBhbmQgZXZlbnRzLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFByb3RvY29sTWVzc2FnZSB7XG5cdFx0LyoqIFNlcXVlbmNlIG51bWJlciAqL1xuXHRcdHNlcTogbnVtYmVyO1xuXHRcdC8qKiBPbmUgb2YgXCJyZXF1ZXN0XCIsIFwicmVzcG9uc2VcIiwgb3IgXCJldmVudFwiICovXG5cdFx0dHlwZTogc3RyaW5nO1xuXHR9XG5cblx0LyoqIENsaWVudC1pbml0aWF0ZWQgcmVxdWVzdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFJlcXVlc3QgZXh0ZW5kcyBQcm90b2NvbE1lc3NhZ2Uge1xuXHRcdC8qKiBUaGUgY29tbWFuZCB0byBleGVjdXRlICovXG5cdFx0Y29tbWFuZDogc3RyaW5nO1xuXHRcdC8qKiBPYmplY3QgY29udGFpbmluZyBhcmd1bWVudHMgZm9yIHRoZSBjb21tYW5kICovXG5cdFx0YXJndW1lbnRzPzogYW55O1xuXHR9XG5cblx0LyoqIFNlcnZlci1pbml0aWF0ZWQgZXZlbnQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFdmVudCBleHRlbmRzIFByb3RvY29sTWVzc2FnZSB7XG5cdFx0LyoqIFR5cGUgb2YgZXZlbnQgKi9cblx0XHRldmVudDogc3RyaW5nO1xuXHRcdC8qKiBFdmVudC1zcGVjaWZpYyBpbmZvcm1hdGlvbiAqL1xuXHRcdGJvZHk/OiBhbnk7XG5cdH1cblxuXHQvKiogU2VydmVyLWluaXRpYXRlZCByZXNwb25zZSB0byBjbGllbnQgcmVxdWVzdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIGV4dGVuZHMgUHJvdG9jb2xNZXNzYWdlIHtcblx0XHQvKiogU2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBjb3JyZXNwb25kaW5nIHJlcXVlc3QgKi9cblx0XHRyZXF1ZXN0X3NlcTogbnVtYmVyO1xuXHRcdC8qKiBPdXRjb21lIG9mIHRoZSByZXF1ZXN0ICovXG5cdFx0c3VjY2VzczogYm9vbGVhbjtcblx0XHQvKiogVGhlIGNvbW1hbmQgcmVxdWVzdGVkICovXG5cdFx0Y29tbWFuZDogc3RyaW5nO1xuXHRcdC8qKiBDb250YWlucyBlcnJvciBtZXNzYWdlIGlmIHN1Y2Nlc3MgPT0gZmFsc2UuICovXG5cdFx0bWVzc2FnZT86IHN0cmluZztcblx0XHQvKiogQ29udGFpbnMgcmVxdWVzdCByZXN1bHQgaWYgc3VjY2VzcyBpcyB0cnVlIGFuZCBvcHRpb25hbCBlcnJvciBkZXRhaWxzIGlmIHN1Y2Nlc3MgaXMgZmFsc2UuICovXG5cdFx0Ym9keT86IGFueTtcblx0fVxuXG5cdC8vLS0tLSBFdmVudHNcblxuXHQvKiogRXZlbnQgbWVzc2FnZSBmb3IgXCJpbml0aWFsaXplZFwiIGV2ZW50IHR5cGUuXG5cdFx0VGhpcyBldmVudCBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVidWcgYWRhcHRlciBpcyByZWFkeSB0byBhY2NlcHQgY29uZmlndXJhdGlvbiByZXF1ZXN0cyAoZS5nLiBTZXRCcmVha3BvaW50c1JlcXVlc3QsIFNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzUmVxdWVzdCkuXG5cdFx0QSBkZWJ1ZyBhZGFwdGVyIGlzIGV4cGVjdGVkIHRvIHNlbmQgdGhpcyBldmVudCB3aGVuIGl0IGlzIHJlYWR5IHRvIGFjY2VwdCBjb25maWd1cmF0aW9uIHJlcXVlc3RzIChidXQgbm90IGJlZm9yZSB0aGUgSW5pdGlhbGl6ZVJlcXVlc3QgaGFzIGZpbmlzaGVkKS5cblx0XHRUaGUgc2VxdWVuY2Ugb2YgZXZlbnRzL3JlcXVlc3RzIGlzIGFzIGZvbGxvd3M6XG5cdFx0LSBhZGFwdGVycyBzZW5kcyBJbml0aWFsaXplZEV2ZW50IChhZnRlciB0aGUgSW5pdGlhbGl6ZVJlcXVlc3QgaGFzIHJldHVybmVkKVxuXHRcdC0gZnJvbnRlbmQgc2VuZHMgemVybyBvciBtb3JlIFNldEJyZWFrcG9pbnRzUmVxdWVzdFxuXHRcdC0gZnJvbnRlbmQgc2VuZHMgb25lIFNldEZ1bmN0aW9uQnJlYWtwb2ludHNSZXF1ZXN0XG5cdFx0LSBmcm9udGVuZCBzZW5kcyBhIFNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzUmVxdWVzdCBpZiBvbmUgb3IgbW9yZSBleGNlcHRpb25CcmVha3BvaW50RmlsdGVycyBoYXZlIGJlZW4gZGVmaW5lZCAob3IgaWYgc3VwcG9ydHNDb25maWd1cmF0aW9uRG9uZVJlcXVlc3QgaXMgbm90IGRlZmluZWQgb3IgZmFsc2UpXG5cdFx0LSBmcm9udGVuZCBzZW5kcyBvdGhlciBmdXR1cmUgY29uZmlndXJhdGlvbiByZXF1ZXN0c1xuXHRcdC0gZnJvbnRlbmQgc2VuZHMgb25lIENvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdCB0byBpbmRpY2F0ZSB0aGUgZW5kIG9mIHRoZSBjb25maWd1cmF0aW9uXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSW5pdGlhbGl6ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciBcInN0b3BwZWRcIiBldmVudCB0eXBlLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBkZWJ1Z2dlZSBoYXMgc3RvcHBlZCBkdWUgdG8gc29tZSBjb25kaXRpb24uXG5cdFx0VGhpcyBjYW4gYmUgY2F1c2VkIGJ5IGEgYnJlYWsgcG9pbnQgcHJldmlvdXNseSBzZXQsIGEgc3RlcHBpbmcgYWN0aW9uIGhhcyBjb21wbGV0ZWQsIGJ5IGV4ZWN1dGluZyBhIGRlYnVnZ2VyIHN0YXRlbWVudCBldGMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RvcHBlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcmVhc29uIGZvciB0aGUgZXZlbnQgKHN1Y2ggYXM6ICdzdGVwJywgJ2JyZWFrcG9pbnQnLCAnZXhjZXB0aW9uJywgJ3BhdXNlJykuIFRoaXMgc3RyaW5nIGlzIHNob3duIGluIHRoZSBVSS4gKi9cblx0XHRcdHJlYXNvbjogc3RyaW5nO1xuXHRcdFx0LyoqIFRoZSB0aHJlYWQgd2hpY2ggd2FzIHN0b3BwZWQuICovXG5cdFx0XHR0aHJlYWRJZD86IG51bWJlcjtcblx0XHRcdC8qKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uLiBFLmcuIGlmIHJlYXNvbiBpcyAnZXhjZXB0aW9uJywgdGV4dCBjb250YWlucyB0aGUgZXhjZXB0aW9uIG5hbWUuIFRoaXMgc3RyaW5nIGlzIHNob3duIGluIHRoZSBVSS4gKi9cblx0XHRcdHRleHQ/OiBzdHJpbmc7XG5cdFx0XHQvKiogSWYgYWxsVGhyZWFkc1N0b3BwZWQgaXMgdHJ1ZSwgYSBkZWJ1ZyBhZGFwdGVyIGNhbiBhbm5vdW5jZSB0aGF0IGFsbCB0aHJlYWRzIGhhdmUgc3RvcHBlZC5cblx0XHRcdCAqICBUaGUgY2xpZW50IHNob3VsZCB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBlbmFibGUgdGhhdCBhbGwgdGhyZWFkcyBjYW4gYmUgZXhwYW5kZWQgdG8gYWNjZXNzIHRoZWlyIHN0YWNrdHJhY2VzLlxuXHRcdFx0ICogIElmIHRoZSBhdHRyaWJ1dGUgaXMgbWlzc2luZyBvciBmYWxzZSwgb25seSB0aGUgdGhyZWFkIHdpdGggdGhlIGdpdmVuIHRocmVhZElkIGNhbiBiZSBleHBhbmRlZC5cblx0XHRcdCAqKi9cblx0XHRcdGFsbFRocmVhZHNTdG9wcGVkPzogYm9vbGVhbjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yIFwiY29udGludWVkXCIgZXZlbnQgdHlwZS5cblx0XHRUaGUgZXZlbnQgaW5kaWNhdGVzIHRoYXQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZGVidWdnZWUgaGFzIGNvbnRpbnVlZC5cblx0XHRQbGVhc2Ugbm90ZTogYSBkZWJ1ZyBhZGFwdGVyIGlzIG5vdCBleHBlY3RlZCB0byBzZW5kIHRoaXMgZXZlbnQgaW4gcmVzcG9uc2UgdG8gYSByZXF1ZXN0IHRoYXQgaW1wbGllcyB0aGF0IGV4ZWN1dGlvbiBjb250aW51ZXMsIGUuZy4gJ2xhdW5jaCcgb3IgJ2NvbnRpbnVlJy5cblx0XHRJdCBpcyBvbmx5IG5lY2Vzc2FyeSB0byBzZW5kIGEgQ29udGludWVkRXZlbnQgaWYgdGhlcmUgd2FzIG5vIHByZXZpb3VzIHJlcXVlc3QgdGhhdCBpbXBsaWVkIHRoaXMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29udGludWVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSB0aHJlYWQgd2hpY2ggd2FzIGNvbnRpbnVlZC4gKi9cblx0XHRcdHRocmVhZElkOiBudW1iZXI7XG5cdFx0XHQvKiogSWYgYWxsVGhyZWFkc0NvbnRpbnVlZCBpcyB0cnVlLCBhIGRlYnVnIGFkYXB0ZXIgY2FuIGFubm91bmNlIHRoYXQgYWxsIHRocmVhZHMgaGF2ZSBjb250aW51ZWQuICoqL1xuXHRcdFx0YWxsVGhyZWFkc0NvbnRpbnVlZD86IGJvb2xlYW47XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciBcImV4aXRlZFwiIGV2ZW50IHR5cGUuXG5cdFx0VGhlIGV2ZW50IGluZGljYXRlcyB0aGF0IHRoZSBkZWJ1Z2dlZSBoYXMgZXhpdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV4aXRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgZXhpdCBjb2RlIHJldHVybmVkIGZyb20gdGhlIGRlYnVnZ2VlLiAqL1xuXHRcdFx0ZXhpdENvZGU6IG51bWJlcjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yIFwidGVybWluYXRlZFwiIGV2ZW50IHR5cGVzLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCBkZWJ1Z2dpbmcgb2YgdGhlIGRlYnVnZ2VlIGhhcyB0ZXJtaW5hdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFRlcm1pbmF0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0XHRib2R5Pzoge1xuXHRcdFx0LyoqIEEgZGVidWcgYWRhcHRlciBtYXkgc2V0ICdyZXN0YXJ0JyB0byB0cnVlIHRvIHJlcXVlc3QgdGhhdCB0aGUgZnJvbnQgZW5kIHJlc3RhcnRzIHRoZSBzZXNzaW9uLiAqL1xuXHRcdFx0cmVzdGFydD86IGJvb2xlYW47XG5cdFx0fVxuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yIFwidGhyZWFkXCIgZXZlbnQgdHlwZS5cblx0XHRUaGUgZXZlbnQgaW5kaWNhdGVzIHRoYXQgYSB0aHJlYWQgaGFzIHN0YXJ0ZWQgb3IgZXhpdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFRocmVhZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcmVhc29uIGZvciB0aGUgZXZlbnQgKHN1Y2ggYXM6ICdzdGFydGVkJywgJ2V4aXRlZCcpLiAqL1xuXHRcdFx0cmVhc29uOiBzdHJpbmc7XG5cdFx0XHQvKiogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHRocmVhZC4gKi9cblx0XHRcdHRocmVhZElkOiBudW1iZXI7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciBcIm91dHB1dFwiIGV2ZW50IHR5cGUuXG5cdFx0VGhlIGV2ZW50IGluZGljYXRlcyB0aGF0IHRoZSB0YXJnZXQgaGFzIHByb2R1Y2VkIG91dHB1dC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBPdXRwdXRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIGNhdGVnb3J5IG9mIG91dHB1dCAoc3VjaCBhczogJ2NvbnNvbGUnLCAnc3Rkb3V0JywgJ3N0ZGVycicsICd0ZWxlbWV0cnknKS4gSWYgbm90IHNwZWNpZmllZCwgJ2NvbnNvbGUnIGlzIGFzc3VtZWQuICovXG5cdFx0XHRjYXRlZ29yeT86IHN0cmluZztcblx0XHRcdC8qKiBUaGUgb3V0cHV0IHRvIHJlcG9ydC4gKi9cblx0XHRcdG91dHB1dDogc3RyaW5nO1xuXHRcdFx0LyoqIE9wdGlvbmFsIGRhdGEgdG8gcmVwb3J0LiBGb3IgdGhlICd0ZWxlbWV0cnknIGNhdGVnb3J5IHRoZSBkYXRhIHdpbGwgYmUgc2VudCB0byB0ZWxlbWV0cnksIGZvciB0aGUgb3RoZXIgY2F0ZWdvcmllcyB0aGUgZGF0YSBpcyBzaG93biBpbiBKU09OIGZvcm1hdC4gKi9cblx0XHRcdGRhdGE/OiBhbnk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciBcImJyZWFrcG9pbnRcIiBldmVudCB0eXBlLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCBzb21lIGluZm9ybWF0aW9uIGFib3V0IGEgYnJlYWtwb2ludCBoYXMgY2hhbmdlZC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBCcmVha3BvaW50RXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZWFzb24gZm9yIHRoZSBldmVudCAoc3VjaCBhczogJ2NoYW5nZWQnLCAnbmV3JykuICovXG5cdFx0XHRyZWFzb246IHN0cmluZztcblx0XHRcdC8qKiBUaGUgYnJlYWtwb2ludC4gKi9cblx0XHRcdGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQ7XG5cdFx0fVxuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yIFwibW9kdWxlXCIgZXZlbnQgdHlwZS5cblx0XHRUaGUgZXZlbnQgaW5kaWNhdGVzIHRoYXQgc29tZSBpbmZvcm1hdGlvbiBhYm91dCBhIG1vZHVsZSBoYXMgY2hhbmdlZC5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgTW9kdWxlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZWFzb24gZm9yIHRoZSBldmVudC4gKi9cblx0XHRcdHJlYXNvbjogJ25ldycgfCAnY2hhbmdlZCcgfCAncmVtb3ZlZCc7XG5cdFx0XHQvKiogVGhlIG5ldywgY2hhbmdlZCwgb3IgcmVtb3ZlZCBtb2R1bGUuIEluIGNhc2Ugb2YgJ3JlbW92ZWQnIG9ubHkgdGhlIG1vZHVsZSBpZCBpcyB1c2VkLiAqL1xuXHRcdFx0bW9kdWxlOiBNb2R1bGU7XG5cdFx0fVxuXHR9XG5cblx0Ly8tLS0tIFJlcXVlc3RzXG5cblx0LyoqIE9uIGVycm9yIHRoYXQgaXMgd2hlbmV2ZXIgJ3N1Y2Nlc3MnIGlzIGZhbHNlLCB0aGUgYm9keSBjYW4gcHJvdmlkZSBtb3JlIGRldGFpbHMuXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIEFuIG9wdGlvbmFsLCBzdHJ1Y3R1cmVkIGVycm9yIG1lc3NhZ2UuICovXG5cdFx0XHRlcnJvcj86IE1lc3NhZ2Vcblx0XHR9XG5cdH1cblxuXHQvKiogSW5pdGlhbGl6ZSByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzIFwiaW5pdGlhbGl6ZVwiLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzOiBJbml0aWFsaXplUmVxdWVzdEFyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcImluaXRpYWxpemVcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVSZXF1ZXN0QXJndW1lbnRzIHtcblx0XHQvKiogVGhlIElEIG9mIHRoZSBkZWJ1Z2dlciBhZGFwdGVyLiBVc2VkIHRvIHNlbGVjdCBvciB2ZXJpZnkgZGVidWdnZXIgYWRhcHRlci4gKi9cblx0XHRhZGFwdGVySUQ6IHN0cmluZztcblx0XHQvKiogSWYgdHJ1ZSBhbGwgbGluZSBudW1iZXJzIGFyZSAxLWJhc2VkIChkZWZhdWx0KS4gKi9cblx0XHRsaW5lc1N0YXJ0QXQxPzogYm9vbGVhbjtcblx0XHQvKiogSWYgdHJ1ZSBhbGwgY29sdW1uIG51bWJlcnMgYXJlIDEtYmFzZWQgKGRlZmF1bHQpLiAqL1xuXHRcdGNvbHVtbnNTdGFydEF0MT86IGJvb2xlYW47XG5cdFx0LyoqIERldGVybWluZXMgaW4gd2hhdCBmb3JtYXQgcGF0aHMgYXJlIHNwZWNpZmllZC4gUG9zc2libGUgdmFsdWVzIGFyZSAncGF0aCcgb3IgJ3VyaScuIFRoZSBkZWZhdWx0IGlzICdwYXRoJywgd2hpY2ggaXMgdGhlIG5hdGl2ZSBmb3JtYXQuICovXG5cdFx0cGF0aEZvcm1hdD86IHN0cmluZztcblxuXHRcdC8qKiBDbGllbnQgc3VwcG9ydHMgdGhlIG9wdGlvbmFsIHR5cGUgYXR0cmlidXRlIGZvciB2YXJpYWJsZXMuICovXG5cdFx0c3VwcG9ydHNWYXJpYWJsZVR5cGU/OiBib29sZWFuO1xuXHRcdC8qKiBDbGllbnQgc3VwcG9ydHMgdGhlIHBhZ2luZyBvZiB2YXJpYWJsZXMuICovXG5cdFx0c3VwcG9ydHNWYXJpYWJsZVBhZ2luZz86IGJvb2xlYW47XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIEluaXRpYWxpemUgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0LyoqIFRoZSBjYXBhYmlsaXRpZXMgb2YgdGhpcyBkZWJ1ZyBhZGFwdGVyICovXG5cdFx0Ym9keT86IENhcGFiaWxpdGVzO1xuXHR9XG5cblx0LyoqIENvbmZpZ3VyYXRpb25Eb25lIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJjb25maWd1cmF0aW9uRG9uZVwiLlxuXHRcdFRoZSBjbGllbnQgb2YgdGhlIGRlYnVnIHByb3RvY29sIG11c3Qgc2VuZCB0aGlzIHJlcXVlc3QgYXQgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2Ugb2YgY29uZmlndXJhdGlvbiByZXF1ZXN0cyAod2hpY2ggd2FzIHN0YXJ0ZWQgYnkgdGhlIEluaXRpYWxpemVkRXZlbnQpXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzPzogQ29uZmlndXJhdGlvbkRvbmVBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJjb25maWd1cmF0aW9uRG9uZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkRvbmVBcmd1bWVudHMge1xuXHRcdC8qIFRoZSBjb25maWd1cmF0aW9uRG9uZSByZXF1ZXN0IGhhcyBubyBzdGFuZGFyZGl6ZWQgYXR0cmlidXRlcy4gKi9cblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJjb25maWd1cmF0aW9uRG9uZVwiIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkRvbmVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBMYXVuY2ggcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcImxhdW5jaFwiLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIExhdW5jaFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IExhdW5jaFJlcXVlc3RBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJsYXVuY2hcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIExhdW5jaFJlcXVlc3RBcmd1bWVudHMge1xuXHRcdC8qIElmIG5vRGVidWcgaXMgdHJ1ZSB0aGUgbGF1bmNoIHJlcXVlc3Qgc2hvdWxkIGxhdW5jaCB0aGUgcHJvZ3JhbSB3aXRob3V0IGVuYWJsaW5nIGRlYnVnZ2luZy4gKi9cblx0XHRub0RlYnVnPzogYm9vbGVhbjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJsYXVuY2hcIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIExhdW5jaFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIEF0dGFjaCByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzIFwiYXR0YWNoXCIuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNoUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogQXR0YWNoUmVxdWVzdEFyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcImF0dGFjaFwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNoUmVxdWVzdEFyZ3VtZW50cyB7XG5cdFx0LyogVGhlIGF0dGFjaCByZXF1ZXN0IGhhcyBubyBzdGFuZGFyZGl6ZWQgYXR0cmlidXRlcy4gKi9cblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJhdHRhY2hcIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEF0dGFjaFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIERpc2Nvbm5lY3QgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcImRpc2Nvbm5lY3RcIi5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBEaXNjb25uZWN0UmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50cz86IERpc2Nvbm5lY3RBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJkaXNjb25uZWN0XCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBEaXNjb25uZWN0QXJndW1lbnRzIHtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJkaXNjb25uZWN0XCIgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBEaXNjb25uZWN0UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogU2V0QnJlYWtwb2ludHMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInNldEJyZWFrcG9pbnRzXCIuXG5cdFx0U2V0cyBtdWx0aXBsZSBicmVha3BvaW50cyBmb3IgYSBzaW5nbGUgc291cmNlIGFuZCBjbGVhcnMgYWxsIHByZXZpb3VzIGJyZWFrcG9pbnRzIGluIHRoYXQgc291cmNlLlxuXHRcdFRvIGNsZWFyIGFsbCBicmVha3BvaW50IGZvciBhIHNvdXJjZSwgc3BlY2lmeSBhbiBlbXB0eSBhcnJheS5cblx0XHRXaGVuIGEgYnJlYWtwb2ludCBpcyBoaXQsIGEgU3RvcHBlZEV2ZW50IChldmVudCB0eXBlICdicmVha3BvaW50JykgaXMgZ2VuZXJhdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldEJyZWFrcG9pbnRzUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogU2V0QnJlYWtwb2ludHNBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJzZXRCcmVha3BvaW50c1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0QnJlYWtwb2ludHNBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgc291cmNlIGxvY2F0aW9uIG9mIHRoZSBicmVha3BvaW50czsgZWl0aGVyIHNvdXJjZS5wYXRoIG9yIHNvdXJjZS5yZWZlcmVuY2UgbXVzdCBiZSBzcGVjaWZpZWQuICovXG5cdFx0c291cmNlOiBTb3VyY2U7XG5cdFx0LyoqIFRoZSBjb2RlIGxvY2F0aW9ucyBvZiB0aGUgYnJlYWtwb2ludHMuICovXG5cdFx0YnJlYWtwb2ludHM/OiBTb3VyY2VCcmVha3BvaW50W107XG5cdFx0LyoqIERlcHJlY2F0ZWQ6IFRoZSBjb2RlIGxvY2F0aW9ucyBvZiB0aGUgYnJlYWtwb2ludHMuICovXG5cdFx0bGluZXM/OiBudW1iZXJbXTtcblx0XHQvKiogQSB2YWx1ZSBvZiB0cnVlIGluZGljYXRlcyB0aGF0IHRoZSB1bmRlcmx5aW5nIHNvdXJjZSBoYXMgYmVlbiBtb2RpZmllZCB3aGljaCByZXN1bHRzIGluIG5ldyBicmVha3BvaW50IGxvY2F0aW9ucy4gKi9cblx0XHRzb3VyY2VNb2RpZmllZD86IGJvb2xlYW47XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwic2V0QnJlYWtwb2ludHNcIiByZXF1ZXN0LlxuXHRcdFJldHVybmVkIGlzIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggYnJlYWtwb2ludCBjcmVhdGVkIGJ5IHRoaXMgcmVxdWVzdC5cblx0XHRUaGlzIGluY2x1ZGVzIHRoZSBhY3R1YWwgY29kZSBsb2NhdGlvbiBhbmQgd2hldGhlciB0aGUgYnJlYWtwb2ludCBjb3VsZCBiZSB2ZXJpZmllZC5cblx0XHRUaGUgYnJlYWtwb2ludHMgcmV0dXJuZWQgYXJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBlbGVtZW50cyBvZiB0aGUgJ2JyZWFrcG9pbnRzJ1xuXHRcdChvciB0aGUgZGVwcmVjYXRlZCAnbGluZXMnKSBpbiB0aGUgU2V0QnJlYWtwb2ludHNBcmd1bWVudHMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0QnJlYWtwb2ludHNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGJyZWFrcG9pbnRzLiBUaGUgYXJyYXkgZWxlbWVudHMgYXJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBlbGVtZW50cyBvZiB0aGUgJ2JyZWFrcG9pbnRzJyAob3IgdGhlIGRlcHJlY2F0ZWQgJ2xpbmVzJykgaW4gdGhlIFNldEJyZWFrcG9pbnRzQXJndW1lbnRzLiAqL1xuXHRcdFx0YnJlYWtwb2ludHM6IEJyZWFrcG9pbnRbXTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIFNldEZ1bmN0aW9uQnJlYWtwb2ludHMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInNldEZ1bmN0aW9uQnJlYWtwb2ludHNcIi5cblx0XHRTZXRzIG11bHRpcGxlIGZ1bmN0aW9uIGJyZWFrcG9pbnRzIGFuZCBjbGVhcnMgYWxsIHByZXZpb3VzIGZ1bmN0aW9uIGJyZWFrcG9pbnRzLlxuXHRcdFRvIGNsZWFyIGFsbCBmdW5jdGlvbiBicmVha3BvaW50LCBzcGVjaWZ5IGFuIGVtcHR5IGFycmF5LlxuXHRcdFdoZW4gYSBmdW5jdGlvbiBicmVha3BvaW50IGlzIGhpdCwgYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ2Z1bmN0aW9uIGJyZWFrcG9pbnQnKSBpcyBnZW5lcmF0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RnVuY3Rpb25CcmVha3BvaW50c1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IFNldEZ1bmN0aW9uQnJlYWtwb2ludHNBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJzZXRGdW5jdGlvbkJyZWFrcG9pbnRzXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRGdW5jdGlvbkJyZWFrcG9pbnRzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIGZ1bmN0aW9uIG5hbWVzIG9mIHRoZSBicmVha3BvaW50cy4gKi9cblx0XHRicmVha3BvaW50czogRnVuY3Rpb25CcmVha3BvaW50W107XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwic2V0RnVuY3Rpb25CcmVha3BvaW50c1wiIHJlcXVlc3QuXG5cdFx0UmV0dXJuZWQgaXMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBicmVha3BvaW50IGNyZWF0ZWQgYnkgdGhpcyByZXF1ZXN0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldEZ1bmN0aW9uQnJlYWtwb2ludHNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGJyZWFrcG9pbnRzLiBUaGUgYXJyYXkgZWxlbWVudHMgY29ycmVzcG9uZCB0byB0aGUgZWxlbWVudHMgb2YgdGhlICdicmVha3BvaW50cycgYXJyYXkuICovXG5cdFx0XHRicmVha3BvaW50czogQnJlYWtwb2ludFtdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogU2V0RXhjZXB0aW9uQnJlYWtwb2ludHMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzXCIuXG5cdFx0RW5hYmxlIHRoYXQgdGhlIGRlYnVnZ2VlIHN0b3BzIG9uIGV4Y2VwdGlvbnMgd2l0aCBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAnZXhjZXB0aW9uJykuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzOiBTZXRFeGNlcHRpb25CcmVha3BvaW50c0FyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcInNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRFeGNlcHRpb25CcmVha3BvaW50c0FyZ3VtZW50cyB7XG5cdFx0LyoqIE5hbWVzIG9mIGVuYWJsZWQgZXhjZXB0aW9uIGJyZWFrcG9pbnRzLiAqL1xuXHRcdGZpbHRlcnM6IHN0cmluZ1tdO1xuXHR9XG5cdC8qKiBSZXNwb25zZSB0byBcInNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzXCIgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRFeGNlcHRpb25CcmVha3BvaW50c1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIENvbnRpbnVlIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJjb250aW51ZVwiLlxuXHRcdFRoZSByZXF1ZXN0IHN0YXJ0cyB0aGUgZGVidWdnZWUgdG8gcnVuIGFnYWluLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbnRpbnVlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogQ29udGludWVBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJjb250aW51ZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29udGludWVBcmd1bWVudHMge1xuXHRcdC8qKiBDb250aW51ZSBleGVjdXRpb24gZm9yIHRoZSBzcGVjaWZpZWQgdGhyZWFkIChpZiBwb3NzaWJsZSkuIElmIHRoZSBiYWNrZW5kIGNhbm5vdCBjb250aW51ZSBvbiBhIHNpbmdsZSB0aHJlYWQgYnV0IHdpbGwgY29udGludWUgb24gYWxsIHRocmVhZHMsIGl0IHNob3VsZCBzZXQgdGhlIGFsbFRocmVhZHNDb250aW51ZWQgYXR0cmlidXRlIGluIHRoZSByZXNwb25zZSB0byB0cnVlLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwiY29udGludWVcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbnRpbnVlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIElmIHRydWUsIHRoZSBjb250aW51ZSByZXF1ZXN0IGhhcyBpZ25vcmVkIHRoZSBzcGVjaWZpZWQgdGhyZWFkIGFuZCBjb250aW51ZWQgYWxsIHRocmVhZHMgaW5zdGVhZC4gSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbWlzc2luZyBhIHZhbHVlIG9mICd0cnVlJyBpcyBhc3N1bWVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiAqL1xuXHRcdFx0YWxsVGhyZWFkc0NvbnRpbnVlZD86IGJvb2xlYW47XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBOZXh0IHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJuZXh0XCIuXG5cdFx0VGhlIHJlcXVlc3Qgc3RhcnRzIHRoZSBkZWJ1Z2dlZSB0byBydW4gYWdhaW4gZm9yIG9uZSBzdGVwLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBOZXh0UmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ3N0ZXAnKSBhZnRlciB0aGUgc3RlcCBoYXMgY29tcGxldGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE5leHRSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzOiBOZXh0QXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwibmV4dFwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgTmV4dEFyZ3VtZW50cyB7XG5cdFx0LyoqIENvbnRpbnVlIGV4ZWN1dGlvbiBmb3IgdGhpcyB0aHJlYWQuICovXG5cdFx0dGhyZWFkSWQ6IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJuZXh0XCIgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBOZXh0UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogU3RlcEluIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJzdGVwSW5cIi5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHN0ZXAgaW50byBhIGZ1bmN0aW9uL21ldGhvZCBpZiBwb3NzaWJsZS5cblx0XHRJZiBpdCBjYW5ub3Qgc3RlcCBpbnRvIGEgdGFyZ2V0LCBcInN0ZXBJblwiIGJlaGF2ZXMgbGlrZSBcIm5leHRcIi5cblx0XHRUaGUgZGVidWcgYWRhcHRlciBmaXJzdCBzZW5kcyB0aGUgU3RlcEluUmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ3N0ZXAnKSBhZnRlciB0aGUgc3RlcCBoYXMgY29tcGxldGVkLlxuXHRcdElmIHRoZXJlIGFyZSBtdWx0aXBsZSBmdW5jdGlvbi9tZXRob2QgY2FsbHMgKG9yIG90aGVyIHRhcmdldHMpIG9uIHRoZSBzb3VyY2UgbGluZSxcblx0XHR0aGUgb3B0aW9uYWwgYXJndW1lbnQgJ3RhcmdldElkJyBjYW4gYmUgdXNlZCB0byBjb250cm9sIGludG8gd2hpY2ggdGFyZ2V0IHRoZSBcInN0ZXBJblwiIHNob3VsZCBvY2N1ci5cblx0XHRUaGUgbGlzdCBvZiBwb3NzaWJsZSB0YXJnZXRzIGZvciBhIGdpdmVuIHNvdXJjZSBsaW5lIGNhbiBiZSByZXRyaWV2ZWQgdmlhIHRoZSBcInN0ZXBJblRhcmdldHNcIiByZXF1ZXN0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJblJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IFN0ZXBJbkFyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcInN0ZXBJblwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEluQXJndW1lbnRzIHtcblx0XHQvKiogQ29udGludWUgZXhlY3V0aW9uIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHRcdC8qKiBPcHRpb25hbCBpZCBvZiB0aGUgdGFyZ2V0IHRvIHN0ZXAgaW50by4gKi9cblx0XHR0YXJnZXRJZD86IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJzdGVwSW5cIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJblJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIFN0ZXBPdXQgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInN0ZXBPdXRcIi5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHJ1biBhZ2FpbiBmb3Igb25lIHN0ZXAuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIFN0ZXBPdXRSZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAnc3RlcCcpIGFmdGVyIHRoZSBzdGVwIGhhcyBjb21wbGV0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcE91dFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IFN0ZXBPdXRBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJzdGVwT3V0XCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwT3V0QXJndW1lbnRzIHtcblx0XHQvKiogQ29udGludWUgZXhlY3V0aW9uIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHR9XG5cdC8qKiBSZXNwb25zZSB0byBcInN0ZXBPdXRcIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBPdXRSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBTdGVwQmFjayByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzIFwic3RlcEJhY2tcIi5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHJ1biBvbmUgc3RlcCBiYWNrd2FyZHMuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIFN0ZXBCYWNrUmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ3N0ZXAnKSBhZnRlciB0aGUgc3RlcCBoYXMgY29tcGxldGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBCYWNrUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogU3RlcEJhY2tBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJzdGVwQmFja1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEJhY2tBcmd1bWVudHMge1xuXHRcdC8qKiBDb250aW51ZSBleGVjdXRpb24gZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwic3RlcEJhY2tcIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBCYWNrUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogUmVzdGFydEZyYW1lIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJyZXN0YXJ0RnJhbWVcIi5cblx0XHRUaGUgcmVxdWVzdCByZXN0YXJ0cyBleGVjdXRpb24gb2YgdGhlIHNwZWNpZmllZCBzdGFja2ZyYW1lLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBSZXN0YXJ0RnJhbWVSZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAncmVzdGFydCcpIGFmdGVyIHRoZSByZXN0YXJ0IGhhcyBjb21wbGV0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUmVzdGFydEZyYW1lUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogUmVzdGFydEZyYW1lQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwicmVzdGFydEZyYW1lXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXN0YXJ0RnJhbWVBcmd1bWVudHMge1xuXHRcdC8qKiBSZXN0YXJ0IHRoaXMgc3RhY2tmcmFtZS4gKi9cblx0XHRmcmFtZUlkOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwicmVzdGFydEZyYW1lXCIgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXN0YXJ0RnJhbWVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBHb3RvIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJnb3RvXCIuXG5cdFx0VGhlIHJlcXVlc3Qgc2V0cyB0aGUgbG9jYXRpb24gd2hlcmUgdGhlIGRlYnVnZ2VlIHdpbGwgY29udGludWUgdG8gcnVuLlxuXHRcdFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gc2tpcCB0aGUgZXhlY3V0aW9uIG9mIGNvZGUgb3IgdG8gZXhlY3V0ZWQgY29kZSBhZ2Fpbi5cblx0XHRUaGUgY29kZSBiZXR3ZWVuIHRoZSBjdXJyZW50IGxvY2F0aW9uIGFuZCB0aGUgZ290byB0YXJnZXQgaXMgbm90IGV4ZWN1dGVkIGJ1dCBza2lwcGVkLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBHb3RvUmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ2dvdG8nKS5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogR290b0FyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcImdvdG9cIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEdvdG9Bcmd1bWVudHMge1xuXHRcdC8qKiBTZXQgdGhlIGdvdG8gdGFyZ2V0IGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRlYnVnZ2VlIHdpbGwgY29udGludWUgdG8gcnVuLiAqL1xuXHRcdHRhcmdldElkOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwiZ290b1wiIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgR290b1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIFBhdXNlIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJwYXVzZVwiLlxuXHRcdFRoZSByZXF1ZXN0IHN1c3BlbnNlcyB0aGUgZGVidWdnZWUuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIFBhdXNlUmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ3BhdXNlJykgYWZ0ZXIgdGhlIHRocmVhZCBoYXMgYmVlbiBwYXVzZWQgc3VjY2Vzc2Z1bGx5LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFBhdXNlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogUGF1c2VBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJwYXVzZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUGF1c2VBcmd1bWVudHMge1xuXHRcdC8qKiBQYXVzZSBleGVjdXRpb24gZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwicGF1c2VcIiByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFBhdXNlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogU3RhY2tUcmFjZSByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzIFwic3RhY2tUcmFjZVwiLlxuXHRcdFRoZSByZXF1ZXN0IHJldHVybnMgYSBzdGFja3RyYWNlIGZyb20gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIHN0YXRlLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0YWNrVHJhY2VSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzOiBTdGFja1RyYWNlQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwic3RhY2tUcmFjZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RhY2tUcmFjZUFyZ3VtZW50cyB7XG5cdFx0LyoqIFJldHJpZXZlIHRoZSBzdGFja3RyYWNlIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHRcdC8qKiBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGZyYW1lIHRvIHJldHVybjsgaWYgb21pdHRlZCBmcmFtZXMgc3RhcnQgYXQgMC4gKi9cblx0XHRzdGFydEZyYW1lPzogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgZnJhbWVzIHRvIHJldHVybi4gSWYgbGV2ZWxzIGlzIG5vdCBzcGVjaWZpZWQgb3IgMCwgYWxsIGZyYW1lcyBhcmUgcmV0dXJuZWQuICovXG5cdFx0bGV2ZWxzPzogbnVtYmVyO1xuXHR9XG5cdC8qKiBSZXNwb25zZSB0byBcInN0YWNrVHJhY2VcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0YWNrVHJhY2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIGZyYW1lcyBvZiB0aGUgc3RhY2tmcmFtZS4gSWYgdGhlIGFycmF5IGhhcyBsZW5ndGggemVybywgdGhlcmUgYXJlIG5vIHN0YWNrZnJhbWVzIGF2YWlsYWJsZS5cblx0XHRcdFx0VGhpcyBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGxvY2F0aW9uIGluZm9ybWF0aW9uIGF2YWlsYWJsZS4gKi9cblx0XHRcdHN0YWNrRnJhbWVzOiBTdGFja0ZyYW1lW107XG5cdFx0XHQvKiogVGhlIHRvdGFsIG51bWJlciBvZiBmcmFtZXMgYXZhaWxhYmxlLiAqL1xuXHRcdFx0dG90YWxGcmFtZXM/OiBudW1iZXI7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBTY29wZXMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInNjb3Blc1wiLlxuXHRcdFRoZSByZXF1ZXN0IHJldHVybnMgdGhlIHZhcmlhYmxlIHNjb3BlcyBmb3IgYSBnaXZlbiBzdGFja2ZyYW1lIElELlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNjb3Blc1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IFNjb3Blc0FyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcInNjb3Blc1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2NvcGVzQXJndW1lbnRzIHtcblx0XHQvKiogUmV0cmlldmUgdGhlIHNjb3BlcyBmb3IgdGhpcyBzdGFja2ZyYW1lLiAqL1xuXHRcdGZyYW1lSWQ6IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJzY29wZXNcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNjb3Blc1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgc2NvcGVzIG9mIHRoZSBzdGFja2ZyYW1lLiBJZiB0aGUgYXJyYXkgaGFzIGxlbmd0aCB6ZXJvLCB0aGVyZSBhcmUgbm8gc2NvcGVzIGF2YWlsYWJsZS4gKi9cblx0XHRcdHNjb3BlczogU2NvcGVbXTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIFZhcmlhYmxlcyByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzIFwidmFyaWFibGVzXCIuXG5cdFx0UmV0cmlldmVzIGFsbCBjaGlsZCB2YXJpYWJsZXMgZm9yIHRoZSBnaXZlbiB2YXJpYWJsZSByZWZlcmVuY2UuXG5cdFx0QW4gb3B0aW9uYWwgZmlsdGVyIGNhbiBiZSB1c2VkIHRvIGxpbWl0IHRoZSBmZXRjaGVkIGNoaWxkcmVuIHRvIGVpdGhlciBuYW1lZCBvciBpbmRleGVkIGNoaWxkcmVuLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFZhcmlhYmxlc1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IFZhcmlhYmxlc0FyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcInZhcmlhYmxlc1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGVzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIFZhcmlhYmxlIHJlZmVyZW5jZS4gKi9cblx0XHR2YXJpYWJsZXNSZWZlcmVuY2U6IG51bWJlcjtcblx0XHQvKiogT3B0aW9uYWwgZmlsdGVyIHRvIGxpbWl0IHRoZSBjaGlsZCB2YXJpYWJsZXMgdG8gZWl0aGVyIG5hbWVkIG9yIGluZGV4ZWQuIElmIG9tbWl0ZWQsIGJvdGggdHlwZXMgYXJlIGZldGNoZWQuICovXG5cdFx0ZmlsdGVyPzogXCJpbmRleGVkXCIgfCBcIm5hbWVkXCI7XG5cdFx0LyoqIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdmFyaWFibGUgdG8gcmV0dXJuOyBpZiBvbWl0dGVkIGNoaWxkcmVuIHN0YXJ0IGF0IDAuICovXG5cdFx0c3RhcnQ/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSBudW1iZXIgb2YgdmFyaWFibGVzIHRvIHJldHVybi4gSWYgY291bnQgaXMgbWlzc2luZyBvciAwLCBhbGwgdmFyaWFibGVzIGFyZSByZXR1cm5lZC4gKi9cblx0XHRjb3VudD86IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJ2YXJpYWJsZXNcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFZhcmlhYmxlc1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBBbGwgKG9yIGEgcmFuZ2UpIG9mIHZhcmlhYmxlcyBmb3IgdGhlIGdpdmVuIHZhcmlhYmxlIHJlZmVyZW5jZS4gKi9cblx0XHRcdHZhcmlhYmxlczogVmFyaWFibGVbXTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIHNldFZhcmlhYmxlIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJzZXRWYXJpYWJsZVwiLlxuXHRcdFNldCB0aGUgdmFyaWFibGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpbiB0aGUgdmFyaWFibGUgY29udGFpbmVyIHRvIGEgbmV3IHZhbHVlLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldFZhcmlhYmxlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogU2V0VmFyaWFibGVBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJzZXRWYXJpYWJsZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0VmFyaWFibGVBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgcmVmZXJlbmNlIG9mIHRoZSB2YXJpYWJsZSBjb250YWluZXIuICovXG5cdFx0dmFyaWFibGVzUmVmZXJlbmNlOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZS4gKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0LyoqIFRoZSB2YWx1ZSBvZiB0aGUgdmFyaWFibGUuICovXG5cdFx0dmFsdWU6IHN0cmluZztcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJzZXRWYXJpYWJsZVwiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0VmFyaWFibGVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogdGhlIG5ldyB2YWx1ZSBvZiB0aGUgdmFyaWFibGUuICovXG5cdFx0XHR2YWx1ZTogc3RyaW5nO1xuXHRcdH07XG5cdH1cblxuXHQvKiogU291cmNlIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJzb3VyY2VcIi5cblx0XHRUaGUgcmVxdWVzdCByZXRyaWV2ZXMgdGhlIHNvdXJjZSBjb2RlIGZvciBhIGdpdmVuIHNvdXJjZSByZWZlcmVuY2UuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU291cmNlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogU291cmNlQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwic291cmNlXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTb3VyY2VBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgcmVmZXJlbmNlIHRvIHRoZSBzb3VyY2UuIFRoaXMgaXMgdGhlIHZhbHVlIHJlY2VpdmVkIGluIFNvdXJjZS5yZWZlcmVuY2UuICovXG5cdFx0c291cmNlUmVmZXJlbmNlOiBudW1iZXI7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwic291cmNlXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTb3VyY2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogQ29udGVudCBvZiB0aGUgc291cmNlIHJlZmVyZW5jZSAqL1xuXHRcdFx0Y29udGVudDogc3RyaW5nO1xuXHRcdFx0LyoqIE9wdGlvbmFsIGNvbnRlbnQgdHlwZSAobWltZSB0eXBlKSBvZiB0aGUgc291cmNlLiAqL1xuXHRcdFx0bWltZVR5cGU/OiBzdHJpbmc7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBUaHJlYWQgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcInRocmVhZHNcIi5cblx0XHRUaGUgcmVxdWVzdCByZXRyaWV2ZXMgYSBsaXN0IG9mIGFsbCB0aHJlYWRzLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFRocmVhZHNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdH1cblx0LyoqIFJlc3BvbnNlIHRvIFwidGhyZWFkc1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkc1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBBbGwgdGhyZWFkcy4gKi9cblx0XHRcdHRocmVhZHM6IFRocmVhZFtdO1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogTW9kdWxlcyBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIGRlYnVnIGFkYXB0ZXIgd2l0aCB0aGUgTW9kdWxlc1JlcXVlc3Qgd2hpY2ggY2FuIGVpdGhlciByZXR1cm4gYWxsIG1vZHVsZXMgb3IgYSByYW5nZSBvZiBtb2R1bGVzIHRvIHN1cHBvcnQgcGFnaW5nLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGVzUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogTW9kdWxlc0FyZ3VtZW50cztcblx0fVxuXHQvKiogQXJndW1lbnRzIGZvciBcIm1vZHVsZXNcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1vZHVsZXNBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IG1vZHVsZSB0byByZXR1cm47IGlmIG9taXR0ZWQgbW9kdWxlcyBzdGFydCBhdCAwLiAqL1xuXHRcdHN0YXJ0TW9kdWxlPzogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbnVtYmVyIG9mIG1vZHVsZXMgdG8gcmV0dXJuLiBJZiBtb2R1bGVDb3VudCBpcyBub3Qgc3BlY2lmaWVkIG9yIDAsIGFsbCBtb2R1bGVzIGFyZSByZXR1cm5lZC4gKi9cblx0XHRtb2R1bGVDb3VudD86IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJtb2R1bGVzXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGVzUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIEFsbCBtb2R1bGVzIG9yIHJhbmdlIG9mIG1vZHVsZXMuICovXG5cdFx0XHRtb2R1bGVzOiBNb2R1bGVbXTtcblx0XHRcdC8qKiBUaGUgdG90YWwgbnVtYmVyIG9mIG1vZHVsZXMgYXZhaWxhYmxlLiAqL1xuXHRcdFx0dG90YWxNb2R1bGVzPzogbnVtYmVyO1xuXHRcdH07XG5cdH1cblxuXHQvKiogRXZhbHVhdGUgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcImV2YWx1YXRlXCIuXG5cdFx0RXZhbHVhdGVzIHRoZSBnaXZlbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSB0b3AgbW9zdCBzdGFjayBmcmFtZS5cblx0XHRUaGUgZXhwcmVzc2lvbiBoYXMgYWNjZXNzIHRvIGFueSB2YXJpYWJsZXMgYW5kIGFyZ3VtZW50cyB0aGF0IGFyZSBpbiBzY29wZS5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBFdmFsdWF0ZVJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IEV2YWx1YXRlQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwiZXZhbHVhdGVcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRlQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUuICovXG5cdFx0ZXhwcmVzc2lvbjogc3RyaW5nO1xuXHRcdC8qKiBFdmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpbiB0aGUgc2NvcGUgb2YgdGhpcyBzdGFjayBmcmFtZS4gSWYgbm90IHNwZWNpZmllZCwgdGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBnbG9iYWwgc2NvcGUuICovXG5cdFx0ZnJhbWVJZD86IG51bWJlcjtcblx0XHQvKiogVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIGV2YWx1YXRlIHJlcXVlc3QgaXMgcnVuLiBQb3NzaWJsZSB2YWx1ZXMgYXJlICd3YXRjaCcgaWYgZXZhbHVhdGUgaXMgcnVuIGluIGEgd2F0Y2gsICdyZXBsJyBpZiBydW4gZnJvbSB0aGUgUkVQTCBjb25zb2xlLCBvciAnaG92ZXInIGlmIHJ1biBmcm9tIGEgZGF0YSBob3Zlci4gKi9cblx0XHRjb250ZXh0Pzogc3RyaW5nO1xuXHR9XG5cdC8qKiBSZXNwb25zZSB0byBcImV2YWx1YXRlXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFdmFsdWF0ZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcmVzdWx0IG9mIHRoZSBldmFsdWF0ZSByZXF1ZXN0LiAqL1xuXHRcdFx0cmVzdWx0OiBzdHJpbmc7XG5cdFx0XHQvKiogVGhlIG9wdGlvbmFsIHR5cGUgb2YgdGhlIGV2YWx1YXRlIHJlc3VsdC4gKi9cblx0XHRcdHR5cGU/OiBzdHJpbmc7XG5cdFx0XHQvKiogSWYgdmFyaWFibGVzUmVmZXJlbmNlIGlzID4gMCwgdGhlIGV2YWx1YXRlIHJlc3VsdCBpcyBzdHJ1Y3R1cmVkIGFuZCBpdHMgY2hpbGRyZW4gY2FuIGJlIHJldHJpZXZlZCBieSBwYXNzaW5nIHZhcmlhYmxlc1JlZmVyZW5jZSB0byB0aGUgVmFyaWFibGVzUmVxdWVzdCAqL1xuXHRcdFx0dmFyaWFibGVzUmVmZXJlbmNlOiBudW1iZXI7XG5cdFx0XHQvKiogVGhlIG51bWJlciBvZiBuYW1lZCBjaGlsZCB2YXJpYWJsZXMuXG5cdFx0XHRcdFRoZSBjbGllbnQgY2FuIHVzZSB0aGlzIG9wdGlvbmFsIGluZm9ybWF0aW9uIHRvIHByZXNlbnQgdGhlIHZhcmlhYmxlcyBpbiBhIHBhZ2VkIFVJIGFuZCBmZXRjaCB0aGVtIGluIGNodW5rcy4gKi9cblx0XHRcdG5hbWVkVmFyaWFibGVzPzogbnVtYmVyO1xuXHRcdFx0LyoqIFRoZSBudW1iZXIgb2YgaW5kZXhlZCBjaGlsZCB2YXJpYWJsZXMuXG5cdFx0XHRcdFRoZSBjbGllbnQgY2FuIHVzZSB0aGlzIG9wdGlvbmFsIGluZm9ybWF0aW9uIHRvIHByZXNlbnQgdGhlIHZhcmlhYmxlcyBpbiBhIHBhZ2VkIFVJIGFuZCBmZXRjaCB0aGVtIGluIGNodW5rcy4gKi9cblx0XHRcdGluZGV4ZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBTdGVwSW5UYXJnZXRzIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJzdGVwSW5UYXJnZXRzXCIuXG5cdFx0VGhpcyByZXF1ZXN0IHJldHJpZXZlcyB0aGUgcG9zc2libGUgc3RlcEluIHRhcmdldHMgZm9yIHRoZSBzcGVjaWZpZWQgc3RhY2sgZnJhbWUuXG5cdFx0VGhlc2UgdGFyZ2V0cyBjYW4gYmUgdXNlZCBpbiB0aGUgXCJzdGVwSW5cIiByZXF1ZXN0LlxuXHRcdFRoZSBTdGVwSW5UYXJnZXRzIG1heSBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgXCJzdXBwb3J0c1N0ZXBJblRhcmdldHNSZXF1ZXN0XCIgY2FwYWJpbGl0eSBleGlzdHMgYW5kIGlzIHRydWUuXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJblRhcmdldHNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0YXJndW1lbnRzOiBTdGVwSW5UYXJnZXRzQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwic3RlcEluVGFyZ2V0c1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEluVGFyZ2V0c0FyZ3VtZW50cyB7XG5cdFx0LyoqIFRoZSBzdGFjayBmcmFtZSBmb3Igd2hpY2ggdG8gcmV0cmlldmUgdGhlIHBvc3NpYmxlIHN0ZXBJbiB0YXJnZXRzLiAqL1xuXHRcdGZyYW1lSWQ6IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJzdGVwSW5UYXJnZXRzXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwSW5UYXJnZXRzUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSBwb3NzaWJsZSBzdGVwSW4gdGFyZ2V0cyBvZiB0aGUgc3BlY2lmaWVkIHNvdXJjZSBsb2NhdGlvbi4gKi9cblx0XHRcdHRhcmdldHM6IFN0ZXBJblRhcmdldFtdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogR290b1RhcmdldHMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyBcImdvdG9UYXJnZXRzXCIuXG5cdFx0VGhpcyByZXF1ZXN0IHJldHJpZXZlcyB0aGUgcG9zc2libGUgZ290byB0YXJnZXRzIGZvciB0aGUgc3BlY2lmaWVkIHNvdXJjZSBsb2NhdGlvbi5cblx0XHRUaGVzZSB0YXJnZXRzIGNhbiBiZSB1c2VkIGluIHRoZSBcImdvdG9cIiByZXF1ZXN0LlxuXHRcdFRoZSBHb3RvVGFyZ2V0cyByZXF1ZXN0IG1heSBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgXCJzdXBwb3J0c0dvdG9UYXJnZXRzUmVxdWVzdFwiIGNhcGFiaWxpdHkgZXhpc3RzIGFuZCBpcyB0cnVlLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvVGFyZ2V0c1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHRhcmd1bWVudHM6IEdvdG9UYXJnZXRzQXJndW1lbnRzO1xuXHR9XG5cdC8qKiBBcmd1bWVudHMgZm9yIFwiZ290b1RhcmdldHNcIiByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEdvdG9UYXJnZXRzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIHNvdXJjZSBsb2NhdGlvbiBmb3Igd2hpY2ggdGhlIGdvdG8gdGFyZ2V0cyBhcmUgZGV0ZXJtaW5lZC4gKi9cblx0XHRzb3VyY2U6IFNvdXJjZTtcblx0XHQvKiogVGhlIGxpbmUgbG9jYXRpb24gZm9yIHdoaWNoIHRoZSBnb3RvIHRhcmdldHMgYXJlIGRldGVybWluZWQuICovXG5cdFx0bGluZTogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBjb2x1bW4gbG9jYXRpb24gZm9yIHdoaWNoIHRoZSBnb3RvIHRhcmdldHMgYXJlIGRldGVybWluZWQuICovXG5cdFx0Y29sdW1uPzogbnVtYmVyO1xuXHR9XG5cdC8qKiBSZXNwb25zZSB0byBcImdvdG9UYXJnZXRzXCIgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvVGFyZ2V0c1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcG9zc2libGUgZ290byB0YXJnZXRzIG9mIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uICovXG5cdFx0XHR0YXJnZXRzOiBHb3RvVGFyZ2V0W107XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFWFBFUklNRU5UQUwsIERPIE5PVCBVU0UhXG5cdFx0Q29tcGxldGlvbnNSZXF1ZXN0IHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgXCJjb21wbGV0aW9uc1wiLlxuXHRcdFJldHVybnMgYSBsaXN0IG9mIHBvc3NpYmxlIGNvbXBsZXRpb25zIGZvciBhIGdpdmVuIGNhcmV0IHBvc2l0aW9uIGFuZCB0ZXh0LlxuXHRcdFRoZSBDb21wbGV0aW9uc1JlcXVlc3QgbWF5IG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBcInN1cHBvcnRzQ29tcGxldGlvbnNSZXF1ZXN0XCIgY2FwYWJpbGl0eSBleGlzdHMgYW5kIGlzIHRydWUuXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25zUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdGFyZ3VtZW50czogQ29tcGxldGlvbnNBcmd1bWVudHM7XG5cdH1cblx0LyoqIEFyZ3VtZW50cyBmb3IgXCJjb21wbGV0aW9uc1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbnNBcmd1bWVudHMge1xuXHRcdC8qKiBPbmUgb3IgbW9yZSBzb3VyY2UgbGluZXMuIFR5cGljYWxseSB0aGlzIGlzIHRoZSB0ZXh0IGEgdXNlciBoYXMgdHlwZWQgaW50byB0aGUgZGVidWcgY29uc29sZSBiZWZvcmUgaGUgYXNrZWQgZm9yIGNvbXBsZXRpb24uICovXG5cdFx0dGV4dDogc3RyaW5nO1xuXHRcdC8qKiBUaGUgY2hhcmFjdGVyIHBvc2l0aW9uIGZvciB3aGljaCB0byBkZXRlcm1pbmUgdGhlIGNvbXBsZXRpb24gcHJvcG9zYWxzLiAqL1xuXHRcdGNvbHVtbjogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBsaW5lIGZvciB3aGljaCB0byBkZXRlcm1pbmUgdGhlIGNvbXBsZXRpb24gcHJvcG9zYWxzLiBJZiBtaXNzaW5nIHRoZSBmaXJzdCBsaW5lIG9mIHRoZSB0ZXh0IGlzIGFzc3VtZWQuICovXG5cdFx0bGluZT86IG51bWJlcjtcblx0fVxuXHQvKiogUmVzcG9uc2UgdG8gXCJjb21wbGV0aW9uc1wiIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbnNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIHBvc3NpYmxlIGNvbXBsZXRpb25zIGZvciAuICovXG5cdFx0XHR0YXJnZXRzOiBDb21wbGV0aW9uSXRlbVtdO1xuXHRcdH07XG5cdH1cblxuXHRleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25JdGVtIHtcblx0XHQvKiogVGhlIGxhYmVsIG9mIHRoaXMgY29tcGxldGlvbiBpdGVtLiBCeSBkZWZhdWx0IHRoaXMgaXMgYWxzbyB0aGUgdGV4dCB0aGF0IGlzIGluc2VydGVkIHdoZW4gc2VsZWN0aW5nIHRoaXMgY29tcGxldGlvbi4gKi9cblx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdC8qKiBJZiB0ZXh0IGlzIG5vdCBmYWxzeSB0aGVuIGl0IGlzIGluc2VydGVkIGluc3RlYWQgb2YgdGhlIGxhYmVsLiAqL1xuXHRcdHRleHQ/OiBzdHJpbmc7XG5cdFx0LyoqIFdoZW4gYSBjb21wbGV0aW9uIGlzIHNlbGVjdGVkIGl0IHJlcGxhY2VzICdsZW5ndGgnIGNoYXJhY3RlcnMgc3RhcnRpbmcgYXQgJ3N0YXJ0JyBpbiB0aGUgdGV4dCBwYXNzZWQgdG8gdGhlIENvbXBsZXRpb25zUmVxdWVzdC5cblx0XHRcdElmIG1pc3NpbmcgdGhlIGZyb250ZW5kIHdpbGwgdHJ5IHRvIGRldGVybWluZSB0aGVzZSB2YWx1ZXMgaGV1cmlzdGljYWxseS4gKi9cblx0XHRzdGFydD86IG51bWJlcjtcblx0XHRsZW5ndGg/OiBudW1iZXI7XG5cdH1cblxuXHQvLy0tLS0gVHlwZXNcblxuXHQvKiogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNhcGFiaWxpdGllcyBvZiBhIGRlYnVnIGFkYXB0ZXIuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0ZXMge1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyB0aGUgY29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0LiAqL1xuXHRcdHN1cHBvcnRzQ29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0PzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgZnVuY3Rpb25CcmVha3BvaW50cy4gKi9cblx0XHRzdXBwb3J0c0Z1bmN0aW9uQnJlYWtwb2ludHM/OiBib29sZWFuO1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyBjb25kaXRpb25hbEJyZWFrcG9pbnRzLiAqL1xuXHRcdHN1cHBvcnRzQ29uZGl0aW9uYWxCcmVha3BvaW50cz86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIGEgKHNpZGUgZWZmZWN0IGZyZWUpIGV2YWx1YXRlIHJlcXVlc3QgZm9yIGRhdGEgaG92ZXJzLiAqL1xuXHRcdHN1cHBvcnRzRXZhbHVhdGVGb3JIb3ZlcnM/OiBib29sZWFuO1xuXHRcdC8qKiBBdmFpbGFibGUgZmlsdGVycyBmb3IgdGhlIHNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzIHJlcXVlc3QuICovXG5cdFx0ZXhjZXB0aW9uQnJlYWtwb2ludEZpbHRlcnM/OiBFeGNlcHRpb25CcmVha3BvaW50c0ZpbHRlcltdO1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyBzdGVwcGluZyBiYWNrLiAqL1xuXHRcdHN1cHBvcnRzU3RlcEJhY2s/OiBib29sZWFuO1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyBzZXR0aW5nIGEgdmFyaWFibGUgdG8gYSB2YWx1ZS4gKi9cblx0XHRzdXBwb3J0c1NldFZhcmlhYmxlPzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgcmVzdGFydGluZyBhIGZyYW1lLiAqL1xuXHRcdHN1cHBvcnRzUmVzdGFydEZyYW1lPzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGdvdG9UYXJnZXRzUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0dvdG9UYXJnZXRzUmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIHRoZSBzdGVwSW5UYXJnZXRzUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c1N0ZXBJblRhcmdldHNSZXF1ZXN0PzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGNvbXBsZXRpb25zUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0NvbXBsZXRpb25zUmVxdWVzdD86IGJvb2xlYW47XG5cdH1cblxuXHQvKiogQW4gRXhjZXB0aW9uQnJlYWtwb2ludHNGaWx0ZXIgaXMgc2hvd24gaW4gdGhlIFVJIGFzIGFuIG9wdGlvbiBmb3IgY29uZmlndXJpbmcgaG93IGV4Y2VwdGlvbnMgYXJlIGRlYWx0IHdpdGguICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXhjZXB0aW9uQnJlYWtwb2ludHNGaWx0ZXIge1xuXHRcdC8qKiBUaGUgaW50ZXJuYWwgSUQgb2YgdGhlIGZpbHRlci4gVGhpcyB2YWx1ZSBpcyBwYXNzZWQgdG8gdGhlIHNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzIHJlcXVlc3QuICovXG5cdFx0ZmlsdGVyOiBzdHJpbmcsXG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBmaWx0ZXIuIFRoaXMgd2lsbCBiZSBzaG93biBpbiB0aGUgVUkuICovXG5cdFx0bGFiZWw6IHN0cmluZyxcblx0XHQvKiogSW5pdGlhbCB2YWx1ZSBvZiB0aGUgZmlsdGVyLiBJZiBub3Qgc3BlY2lmaWVkIGEgdmFsdWUgJ2ZhbHNlJyBpcyBhc3N1bWVkLiAqL1xuXHRcdGRlZmF1bHQ/OiBib29sZWFuXG5cdH1cblxuXHQvKiogQSBzdHJ1Y3R1cmVkIG1lc3NhZ2Ugb2JqZWN0LiBVc2VkIHRvIHJldHVybiBlcnJvcnMgZnJvbSByZXF1ZXN0cy4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHtcblx0XHQvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBtZXNzYWdlLiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIEEgZm9ybWF0IHN0cmluZyBmb3IgdGhlIG1lc3NhZ2UuIEVtYmVkZGVkIHZhcmlhYmxlcyBoYXZlIHRoZSBmb3JtICd7bmFtZX0nLlxuXHRcdCAgICBJZiB2YXJpYWJsZSBuYW1lIHN0YXJ0cyB3aXRoIGFuIHVuZGVyc2NvcmUgY2hhcmFjdGVyLCB0aGUgdmFyaWFibGUgZG9lcyBub3QgY29udGFpbiB1c2VyIGRhdGEgKFBJSSkgYW5kIGNhbiBiZSBzYWZlbHkgdXNlZCBmb3IgdGVsZW1ldHJ5IHB1cnBvc2VzLiAqL1xuXHRcdGZvcm1hdDogc3RyaW5nO1xuXHRcdC8qKiBBbiBvYmplY3QgdXNlZCBhcyBhIGRpY3Rpb25hcnkgZm9yIGxvb2tpbmcgdXAgdGhlIHZhcmlhYmxlcyBpbiB0aGUgZm9ybWF0IHN0cmluZy4gKi9cblx0XHR2YXJpYWJsZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXHRcdC8qKiBpZiB0cnVlIHNlbmQgdG8gdGVsZW1ldHJ5ICovXG5cdFx0c2VuZFRlbGVtZXRyeT86IGJvb2xlYW47XG5cdFx0LyoqIGlmIHRydWUgc2hvdyB1c2VyICovXG5cdFx0c2hvd1VzZXI/OiBib29sZWFuO1xuXHRcdC8qKiBBbiBvcHRpb25hbCB1cmwgd2hlcmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIG1lc3NhZ2UgY2FuIGJlIGZvdW5kLiAqL1xuXHRcdHVybD86IHN0cmluZztcblx0XHQvKiogQW4gb3B0aW9uYWwgbGFiZWwgdGhhdCBpcyBwcmVzZW50ZWQgdG8gdGhlIHVzZXIgYXMgdGhlIFVJIGZvciBvcGVuaW5nIHRoZSB1cmwuICovXG5cdFx0dXJsTGFiZWw/OiBzdHJpbmc7XG5cdH1cblxuXHQvKipcblx0ICogQSBNb2R1bGUgb2JqZWN0IHJlcHJlc2VudHMgYSByb3cgaW4gdGhlIG1vZHVsZXMgdmlldy5cblx0ICogVHdvIGF0dHJpYnV0ZXMgYXJlIG1hbmRhdG9yeTogYW4gaWQgaWRlbnRpZmllcyBhIG1vZHVsZSBpbiB0aGUgbW9kdWxlcyB2aWV3IGFuZCBpcyB1c2VkIGluIGEgTW9kdWxlRXZlbnQgZm9yIGlkZW50aWZ5aW5nIGEgbW9kdWxlIGZvciBhZGRpbmcsIHVwZGF0aW5nIG9yIGRlbGV0aW5nLlxuXHQgKiBUaGUgbmFtZSBpcyB1c2VkIHRvIG1pbmltYWxseSByZW5kZXIgdGhlIG1vZHVsZSBpbiB0aGUgVUkuXG5cdCAqXG5cdCAqIEFkZGl0aW9uYWwgYXR0cmlidXRlcyBjYW4gYmUgYWRkZWQgdG8gdGhlIG1vZHVsZS4gVGhleSB3aWxsIHNob3cgdXAgaW4gdGhlIG1vZHVsZSBWaWV3IGlmIHRoZXkgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgQ29sdW1uRGVzY3JpcHRvci5cblx0ICpcblx0ICogVG8gYXZvaWQgYW4gdW5uZWNlc3NhcnkgcHJvbGlmZXJhdGlvbiBvZiBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgd2l0aCBzaW1pbGFyIHNlbWFudGljcyBidXQgZGlmZmVyZW50IG5hbWVzXG5cdCAqIHdlIHJlY29tbWVuZCB0byByZS11c2UgYXR0cmlidXRlcyBmcm9tIHRoZSAncmVjb21tZW5kZWQnIGxpc3QgYmVsb3cgZmlyc3QsIGFuZCBvbmx5IGludHJvZHVjZSBuZXcgYXR0cmlidXRlcyBpZiBub3RoaW5nIGFwcHJvcHJpYXRlIGNvdWxkIGJlIGZvdW5kLlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGUge1xuXHRcdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG1vZHVsZS4gKi9cblx0XHRpZDogbnVtYmVyIHwgc3RyaW5nO1xuXHRcdC8qKiBBIG5hbWUgb2YgdGhlIG1vZHVsZS4gKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cblx0XHQvLyBvcHRpb25hbCBidXQgcmVjb21tZW5kZWQgYXR0cmlidXRlcy5cblx0XHQvLyBhbHdheXMgdHJ5IHRvIHVzZSB0aGVzZSBmaXJzdCBiZWZvcmUgaW50cm9kdWNpbmcgYWRkaXRpb25hbCBhdHRyaWJ1dGVzLlxuXG5cdFx0LyoqIExvZ2ljYWwgZnVsbCBwYXRoIHRvIHRoZSBtb2R1bGUuIFRoZSBleGFjdCBkZWZpbml0aW9uIGlzIGltcGxlbWVudGF0aW9uIGRlZmluZWQsIGJ1dCB1c3VhbGx5IHRoaXMgd291bGQgYmUgYSBmdWxsIHBhdGggdG8gdGhlIG9uLWRpc2sgZmlsZSBmb3IgdGhlIG1vZHVsZS4gKi9cblx0XHRwYXRoPzogc3RyaW5nXG5cdFx0LyoqIFRydWUgaWYgdGhlIG1vZHVsZSBpcyBvcHRpbWl6ZWQuICovXG5cdFx0aXNPcHRpbWl6ZWQ/OiBib29sZWFuXG5cdFx0LyoqIFRydWUgaWYgdGhlIG1vZHVsZSBpcyBjb25zaWRlcmVkICd1c2VyIGNvZGUnIGJ5IGEgZGVidWdnZXIgdGhhdCBzdXBwb3J0cyAnSnVzdCBNeSBDb2RlJy4gKi9cblx0XHRpc1VzZXJDb2RlPzogYm9vbGVhblxuXHRcdC8qKiBWZXJzaW9uIG9mIE1vZHVsZS4gKi9cblx0XHR2ZXJzaW9uPyA6IHN0cmluZ1xuXHRcdC8qKiBVc2VyIHVuZGVyc3RhbmRhYmxlIGRlc2NyaXB0aW9uIG9mIGlmIHN5bWJvbHMgd2VyZSBmb3VuZCBmb3IgdGhlIG1vZHVsZSAoZXg6ICdTeW1ib2xzIExvYWRlZCcsICdTeW1ib2xzIG5vdCBmb3VuZCcsIGV0YyAqL1xuXHRcdHN5bWJvbFN0YXR1cz86IHN0cmluZ1xuXHRcdC8qKiBMb2dpY2FsIGZ1bGwgcGF0aCB0byB0aGUgc3ltYm9sIGZpbGUuIFRoZSBleGFjdCBkZWZpbml0aW9uIGlzIGltcGxlbWVudGF0aW9uIGRlZmluZWQuICovXG5cdFx0c3ltYm9sRmlsZVBhdGg/OiBzdHJpbmdcblx0XHQvKiogTW9kdWxlIGNyZWF0ZWQgb3IgbW9kaWZpZWQuICovXG5cdFx0ZGF0ZVRpbWVTdGFtcD86IHN0cmluZ1xuXHRcdC8qKiBBZGRyZXNzIHJhbmdlIGNvdmVyZWQgYnkgdGhpcyBtb2R1bGUuICovXG5cdFx0YWRkcmVzc1JhbmdlPzogc3RyaW5nXG5cdH1cblxuXHQvKipcblx0ICogQSBDb2x1bW5EZXNjcmlwdG9yIHNwZWNpZmllcyB3aGF0IG1vZHVsZSBhdHRyaWJ1dGUgdG8gc2hvdyBpbiBhIGNvbHVtbiBvZiB0aGUgTW9kdWxlc1ZpZXcsIGhvdyB0byBmb3JtYXQgaXQsIGFuZCB3aGF0IHRoZSBjb2x1bW4ncyBsYWJlbCBzaG91bGQgYmUuXG5cdCAqIEl0IGlzIG9ubHkgdXNlZCBpZiB0aGUgdW5kZXJseWluZyBVSSBhY3R1YWxseSBzdXBwb3J0cyB0aGlzIGxldmVsIG9mIGN1c3RvbWl6YXRpb24uXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbHVtbkRlc2NyaXB0b3Ige1xuXHRcdC8qKiBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgcmVuZGVyZWQgaW4gdGhpcyBjb2x1bW4uICovXG5cdFx0YXR0cmlidXRlTmFtZTogc3RyaW5nO1xuXHRcdC8qKiBIZWFkZXIgVUkgbGFiZWwgb2YgY29sdW1uLiAqL1xuXHRcdGxhYmVsOiBzdHJpbmc7XG5cdFx0LyoqIEZvcm1hdCB0byB1c2UgZm9yIHRoZSByZW5kZXJlZCB2YWx1ZXMgaW4gdGhpcyBjb2x1bW4uIFRCRCBob3cgdGhlIGZvcm1hdCBzdHJpbmdzIGxvb2tzIGxpa2UuICovXG5cdFx0Zm9ybWF0OiBzdHJpbmc7XG5cdFx0LyoqIFdpZHRoIG9mIHRoaXMgY29sdW1uIGluIGNoYXJhY3RlcnMgKGhpbnQgb25seSkuICovXG5cdFx0d2lkdGg6IG51bWJlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgTW9kdWxlc1ZpZXdEZXNjcmlwdG9yIGlzIHRoZSBjb250YWluZXIgZm9yIGFsbCBkZWNsYXJhdGl2ZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb2YgYSBNb2R1bGVWaWV3LlxuXHQgKiBGb3Igbm93IGl0IG9ubHkgc3BlY2lmaWVzIHRoZSBjb2x1bW5zIHRvIGJlIHNob3duIGluIHRoZSBtb2R1bGVzIHZpZXcuXG5cdCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1vZHVsZXNWaWV3RGVzY3JpcHRvciB7XG5cdFx0Y29sdW1uczogQ29sdW1uRGVzY3JpcHRvcltdO1xuXHR9XG5cblx0LyoqIEEgVGhyZWFkICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkIHtcblx0XHQvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB0aHJlYWQuICovXG5cdFx0aWQ6IG51bWJlcjtcblx0XHQvKiogQSBuYW1lIG9mIHRoZSB0aHJlYWQuICovXG5cdFx0bmFtZTogc3RyaW5nO1xuXHR9XG5cblx0LyoqIEEgU291cmNlIGlzIGEgZGVzY3JpcHRvciBmb3Igc291cmNlIGNvZGUuIEl0IGlzIHJldHVybmVkIGZyb20gdGhlIGRlYnVnIGFkYXB0ZXIgYXMgcGFydCBvZiBhIFN0YWNrRnJhbWUgYW5kIGl0IGlzIHVzZWQgYnkgY2xpZW50cyB3aGVuIHNwZWNpZnlpbmcgYnJlYWtwb2ludHMuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU291cmNlIHtcblx0XHQvKiogVGhlIHNob3J0IG5hbWUgb2YgdGhlIHNvdXJjZS4gRXZlcnkgc291cmNlIHJldHVybmVkIGZyb20gdGhlIGRlYnVnIGFkYXB0ZXIgaGFzIGEgbmFtZS4gV2hlbiBzcGVjaWZ5aW5nIGEgc291cmNlIHRvIHRoZSBkZWJ1ZyBhZGFwdGVyIHRoaXMgbmFtZSBpcyBvcHRpb25hbC4gKi9cblx0XHRuYW1lPzogc3RyaW5nO1xuXHRcdC8qKiBUaGUgbG9uZyAoYWJzb2x1dGUpIHBhdGggb2YgdGhlIHNvdXJjZS4gSXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdCB0aGUgc291cmNlIGV4aXN0cyBhdCB0aGlzIGxvY2F0aW9uLiAqL1xuXHRcdHBhdGg/OiBzdHJpbmc7XG5cdFx0LyoqIElmIHNvdXJjZVJlZmVyZW5jZSA+IDAgdGhlIGNvbnRlbnRzIG9mIHRoZSBzb3VyY2UgY2FuIGJlIHJldHJpZXZlZCB0aHJvdWdoIHRoZSBTb3VyY2VSZXF1ZXN0LiBBIHNvdXJjZVJlZmVyZW5jZSBpcyBvbmx5IHZhbGlkIGZvciBhIHNlc3Npb24sIHNvIGl0IG11c3Qgbm90IGJlIHVzZWQgdG8gcGVyc2lzdCBhIHNvdXJjZS4gKi9cblx0XHRzb3VyY2VSZWZlcmVuY2U/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSAob3B0aW9uYWwpIG9yaWdpbiBvZiB0aGlzIHNvdXJjZTogcG9zc2libGUgdmFsdWVzIFwiaW50ZXJuYWwgbW9kdWxlXCIsIFwiaW5saW5lZCBjb250ZW50IGZyb20gc291cmNlIG1hcFwiLCBldGMuICovXG5cdFx0b3JpZ2luPzogc3RyaW5nO1xuXHRcdC8qKiBPcHRpb25hbCBkYXRhIHRoYXQgYSBkZWJ1ZyBhZGFwdGVyIG1pZ2h0IHdhbnQgdG8gbG9vcCB0aHJvdWdoIHRoZSBjbGllbnQuIFRoZSBjbGllbnQgc2hvdWxkIGxlYXZlIHRoZSBkYXRhIGludGFjdCBhbmQgcGVyc2lzdCBpdCBhY3Jvc3Mgc2Vzc2lvbnMuIFRoZSBjbGllbnQgc2hvdWxkIG5vdCBpbnRlcnByZXQgdGhlIGRhdGEuICovXG5cdFx0YWRhcHRlckRhdGE/OiBhbnk7XG5cdH1cblxuXHQvKiogQSBTdGFja2ZyYW1lIGNvbnRhaW5zIHRoZSBzb3VyY2UgbG9jYXRpb24uICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RhY2tGcmFtZSB7XG5cdFx0LyoqIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBzdGFjayBmcmFtZS4gSXQgbXVzdCBiZSB1bmlxdWUgYWNyb3NzIGFsbCB0aHJlYWRzLiBUaGlzIGlkIGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBzY29wZXMgb2YgdGhlIGZyYW1lIHdpdGggdGhlICdzY29wZXNSZXF1ZXN0JyBvciB0byByZXN0YXJ0IHRoZSBleGVjdXRpb24gb2YgYSBzdGFja2ZyYW1lLiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBzdGFjayBmcmFtZSwgdHlwaWNhbGx5IGEgbWV0aG9kIG5hbWUgKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0LyoqIFRoZSBvcHRpb25hbCBzb3VyY2Ugb2YgdGhlIGZyYW1lLiAqL1xuXHRcdHNvdXJjZT86IFNvdXJjZTtcblx0XHQvKiogVGhlIGxpbmUgd2l0aGluIHRoZSBmaWxlIG9mIHRoZSBmcmFtZS4gSWYgc291cmNlIGlzIG51bGwgb3IgZG9lc24ndCBleGlzdCwgbGluZSBpcyAwIGFuZCBtdXN0IGJlIGlnbm9yZWQuICovXG5cdFx0bGluZTogbnVtYmVyO1xuXHRcdC8qKiBUaGUgY29sdW1uIHdpdGhpbiB0aGUgbGluZS4gSWYgc291cmNlIGlzIG51bGwgb3IgZG9lc24ndCBleGlzdCwgY29sdW1uIGlzIDAgYW5kIG11c3QgYmUgaWdub3JlZC4gKi9cblx0XHRjb2x1bW46IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgZW5kIGxpbmUgb2YgdGhlIHJhbmdlIGNvdmVyZWQgYnkgdGhlIHN0YWNrIGZyYW1lLiAqL1xuXHRcdGVuZExpbmU/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGVuZCBjb2x1bW4gb2YgdGhlIHJhbmdlIGNvdmVyZWQgYnkgdGhlIHN0YWNrIGZyYW1lLiAqL1xuXHRcdGVuZENvbHVtbj86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBBIFNjb3BlIGlzIGEgbmFtZWQgY29udGFpbmVyIGZvciB2YXJpYWJsZXMuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2NvcGUge1xuXHRcdC8qKiBuYW1lIG9mIHRoZSBzY29wZSAoYXMgc3VjaCAnQXJndW1lbnRzJywgJ0xvY2FscycpICovXG5cdFx0bmFtZTogc3RyaW5nO1xuXHRcdC8qKiBUaGUgdmFyaWFibGVzIG9mIHRoaXMgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCBieSBwYXNzaW5nIHRoZSB2YWx1ZSBvZiB2YXJpYWJsZXNSZWZlcmVuY2UgdG8gdGhlIFZhcmlhYmxlc1JlcXVlc3QuICovXG5cdFx0dmFyaWFibGVzUmVmZXJlbmNlOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBudW1iZXIgb2YgbmFtZWQgdmFyaWFibGVzIGluIHRoaXMgc2NvcGUuXG5cdFx0XHRUaGUgY2xpZW50IGNhbiB1c2UgdGhpcyBvcHRpb25hbCBpbmZvcm1hdGlvbiB0byBwcmVzZW50IHRoZSB2YXJpYWJsZXMgaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuICovXG5cdFx0bmFtZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSBudW1iZXIgb2YgaW5kZXhlZCB2YXJpYWJsZXMgaW4gdGhpcyBzY29wZS5cblx0XHRcdFRoZSBjbGllbnQgY2FuIHVzZSB0aGlzIG9wdGlvbmFsIGluZm9ybWF0aW9uIHRvIHByZXNlbnQgdGhlIHZhcmlhYmxlcyBpbiBhIHBhZ2VkIFVJIGFuZCBmZXRjaCB0aGVtIGluIGNodW5rcy4gKi9cblx0XHRpbmRleGVkVmFyaWFibGVzPzogbnVtYmVyO1xuXHRcdC8qKiBJZiB0cnVlLCB0aGUgbnVtYmVyIG9mIHZhcmlhYmxlcyBpbiB0aGlzIHNjb3BlIGlzIGxhcmdlIG9yIGV4cGVuc2l2ZSB0byByZXRyaWV2ZS4gKi9cblx0XHRleHBlbnNpdmU6IGJvb2xlYW47XG5cdH1cblxuXHQvKiogQSBWYXJpYWJsZSBpcyBhIG5hbWUvdmFsdWUgcGFpci5cblx0XHRPcHRpb25hbGx5IGEgdmFyaWFibGUgY2FuIGhhdmUgYSAndHlwZScgdGhhdCBpcyBzaG93biBpZiBzcGFjZSBwZXJtaXRzIG9yIHdoZW4gaG92ZXJpbmcgb3ZlciB0aGUgdmFyaWFibGUncyBuYW1lLlxuXHRcdEFuIG9wdGlvbmFsICdraW5kJyBpcyB1c2VkIHRvIHJlbmRlciBhZGRpdGlvbmFsIHByb3BlcnRpZXMgb2YgdGhlIHZhcmlhYmxlLCBlLmcuIGRpZmZlcmVudCBpY29ucyBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IGEgdmFyaWFibGUgaXMgcHVibGljIG9yIHByaXZhdGUuXG5cdFx0SWYgdGhlIHZhbHVlIGlzIHN0cnVjdHVyZWQgKGhhcyBjaGlsZHJlbiksIGEgaGFuZGxlIGlzIHByb3ZpZGVkIHRvIHJldHJpZXZlIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LlxuXHRcdElmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaXMgbGFyZ2UsIHRoZSBudW1iZXIgc2hvdWxkIGJlIHJldHVybmVkIHZpYSB0aGUgb3B0aW9uYWwgJ3RvdGFsVmFyaWFibGVzJyBhdHRyaWJ1dGUuXG5cdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgY2hpbGRyZW4gaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGUge1xuXHRcdC8qKiBUaGUgdmFyaWFibGUncyBuYW1lLiAqL1xuXHRcdG5hbWU6IHN0cmluZztcblx0XHQvKiogVGhlIHZhcmlhYmxlJ3MgdHlwZS4gKi9cblx0XHR0eXBlPzogc3RyaW5nO1xuXHRcdC8qKiBUaGUgdmFyaWFibGUncyB2YWx1ZS4gRm9yIHN0cnVjdHVyZWQgb2JqZWN0cyB0aGlzIGNhbiBiZSBhIG11bHRpIGxpbmUgdGV4dCwgZS5nLiBmb3IgYSBmdW5jdGlvbiB0aGUgYm9keSBvZiBhIGZ1bmN0aW9uLiAqL1xuXHRcdHZhbHVlOiBzdHJpbmc7XG5cdFx0LyoqIFByb3BlcnRpZXMgb2YgYSB2YXJpYWJsZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gcmVuZGVyIHRoZSB2YXJpYWJsZSBpbiB0aGUgVUkuIEZvcm1hdCBvZiB0aGUgc3RyaW5nIHZhbHVlOiBUQkQuICovXG5cdFx0a2luZD86IHN0cmluZztcblx0XHQvKiogSWYgdmFyaWFibGVzUmVmZXJlbmNlIGlzID4gMCwgdGhlIHZhcmlhYmxlIGlzIHN0cnVjdHVyZWQgYW5kIGl0cyBjaGlsZHJlbiBjYW4gYmUgcmV0cmlldmVkIGJ5IHBhc3NpbmcgdmFyaWFibGVzUmVmZXJlbmNlIHRvIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LiAqL1xuXHRcdHZhcmlhYmxlc1JlZmVyZW5jZTogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbnVtYmVyIG9mIG5hbWVkIGNoaWxkIHZhcmlhYmxlcyBpbiB0aGlzIHNjb3BlLlxuXHRcdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgY2hpbGRyZW4gaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuICovXG5cdFx0bmFtZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSBudW1iZXIgb2YgaW5kZXhlZCBjaGlsZCB2YXJpYWJsZXMgaW4gdGhpcyBzY29wZS5cblx0XHRcdFRoZSBjbGllbnQgY2FuIHVzZSB0aGlzIG9wdGlvbmFsIGluZm9ybWF0aW9uIHRvIHByZXNlbnQgdGhlIGNoaWxkcmVuIGluIGEgcGFnZWQgVUkgYW5kIGZldGNoIHRoZW0gaW4gY2h1bmtzLiAqL1xuXHRcdGluZGV4ZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdH1cblxuXHQvKiogUHJvcGVydGllcyBvZiBhIGJyZWFrcG9pbnQgcGFzc2VkIHRvIHRoZSBzZXRCcmVha3BvaW50cyByZXF1ZXN0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNvdXJjZUJyZWFrcG9pbnQge1xuXHRcdC8qKiBUaGUgc291cmNlIGxpbmUgb2YgdGhlIGJyZWFrcG9pbnQuICovXG5cdFx0bGluZTogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBzb3VyY2UgY29sdW1uIG9mIHRoZSBicmVha3BvaW50LiAqL1xuXHRcdGNvbHVtbj86IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgZXhwcmVzc2lvbiBmb3IgY29uZGl0aW9uYWwgYnJlYWtwb2ludHMuICovXG5cdFx0Y29uZGl0aW9uPzogc3RyaW5nO1xuXHR9XG5cblx0LyoqIFByb3BlcnRpZXMgb2YgYSBicmVha3BvaW50IHBhc3NlZCB0byB0aGUgc2V0RnVuY3Rpb25CcmVha3BvaW50cyByZXF1ZXN0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uQnJlYWtwb2ludCB7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi4gKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGV4cHJlc3Npb24gZm9yIGNvbmRpdGlvbmFsIGJyZWFrcG9pbnRzLiAqL1xuXHRcdGNvbmRpdGlvbj86IHN0cmluZztcblx0fVxuXG5cdC8qKiBJbmZvcm1hdGlvbiBhYm91dCBhIEJyZWFrcG9pbnQgY3JlYXRlZCBpbiBzZXRCcmVha3BvaW50cyBvciBzZXRGdW5jdGlvbkJyZWFrcG9pbnRzLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEJyZWFrcG9pbnQge1xuXHRcdC8qKiBBbiBvcHRpb25hbCB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGJyZWFrcG9pbnQuICovXG5cdFx0aWQ/OiBudW1iZXI7XG5cdFx0LyoqIElmIHRydWUgYnJlYWtwb2ludCBjb3VsZCBiZSBzZXQgKGJ1dCBub3QgbmVjZXNzYXJpbHkgYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24pLiAgKi9cblx0XHR2ZXJpZmllZDogYm9vbGVhbjtcblx0XHQvKiogQW4gb3B0aW9uYWwgbWVzc2FnZSBhYm91dCB0aGUgc3RhdGUgb2YgdGhlIGJyZWFrcG9pbnQuIFRoaXMgaXMgc2hvd24gdG8gdGhlIHVzZXIgYW5kIGNhbiBiZSB1c2VkIHRvIGV4cGxhaW4gd2h5IGEgYnJlYWtwb2ludCBjb3VsZCBub3QgYmUgdmVyaWZpZWQuICovXG5cdFx0bWVzc2FnZT86IHN0cmluZztcblx0XHQvKiogVGhlIHNvdXJjZSB3aGVyZSB0aGUgYnJlYWtwb2ludCBpcyBsb2NhdGVkLiAqL1xuXHRcdHNvdXJjZT86IFNvdXJjZTtcblx0XHQvKiogVGhlIHN0YXJ0IGxpbmUgb2YgdGhlIGFjdHVhbCByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBicmVha3BvaW50LiAqL1xuXHRcdGxpbmU/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIHN0YXJ0IGNvbHVtbiBvZiB0aGUgYWN0dWFsIHJhbmdlIGNvdmVyZWQgYnkgdGhlIGJyZWFrcG9pbnQuICovXG5cdFx0Y29sdW1uPzogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBlbmQgbGluZSBvZiB0aGUgYWN0dWFsIHJhbmdlIGNvdmVyZWQgYnkgdGhlIGJyZWFrcG9pbnQuICovXG5cdFx0ZW5kTGluZT86IG51bWJlcjtcblx0XHQvKiogIEFuIG9wdGlvbmFsIGVuZCBjb2x1bW4gb2YgdGhlIGFjdHVhbCByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBicmVha3BvaW50LiBJZiBubyBlbmQgbGluZSBpcyBnaXZlbiwgdGhlbiB0aGUgZW5kIGNvbHVtbiBpcyBhc3N1bWVkIHRvIGJlIGluIHRoZSBzdGFydCBsaW5lLiAqL1xuXHRcdGVuZENvbHVtbj86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBBIFN0ZXBJblRhcmdldCBjYW4gYmUgdXNlZCBpbiB0aGUgJ3N0ZXBJbicgcmVxdWVzdCBhbmQgZGV0ZXJtaW5lcyBpbnRvXG5cdCAqICB3aGljaCBzaW5nbGUgdGFyZ2V0IHRoZSBzdGVwSW4gcmVxdWVzdCBzaG91bGQgc3RlcC5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEluVGFyZ2V0IHtcblx0XHQvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIGEgc3RlcEluIHRhcmdldC4gKi9cblx0XHRpZDogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbmFtZSBvZiB0aGUgc3RlcEluIHRhcmdldCAoc2hvd24gaW4gdGhlIFVJKS4gKi9cbiBcdFx0bGFiZWw6IHN0cmluZztcblx0fVxuXG5cdC8qKiBBIEdvdG9UYXJnZXQgZGVzY3JpYmVzIGEgY29kZSBsb2NhdGlvbiB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdGFyZ2V0IGluIHRoZSAnZ290bycgcmVxdWVzdC5cblx0XHRUaGUgcG9zc2libGUgZ290byB0YXJnZXRzIGNhbiBiZSBkZXRlcm1pbmVkIHZpYSB0aGUgJ2dvdG9UYXJnZXRzJyByZXF1ZXN0LlxuXHQgKi9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvVGFyZ2V0IHtcblx0XHQvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIGEgZ290byB0YXJnZXQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgZ290byByZXF1ZXN0LiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBnb3RvIHRhcmdldCAoc2hvd24gaW4gdGhlIFVJKS4gKi9cbiBcdFx0bGFiZWw6IHN0cmluZztcblx0XHQvKiogVGhlIGxpbmUgb2YgdGhlIGdvdG8gdGFyZ2V0LiAqL1xuXHRcdGxpbmU6IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgY29sdW1uIG9mIHRoZSBnb3RvIHRhcmdldC4gKi9cblx0XHRjb2x1bW4/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGVuZCBsaW5lIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBnb3RvIHRhcmdldC4gKi9cblx0XHRlbmRMaW5lPzogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBlbmQgY29sdW1uIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBnb3RvIHRhcmdldC4gKi9cblx0XHRlbmRDb2x1bW4/OiBudW1iZXI7XG5cdH1cbn1cbiJdfQ==