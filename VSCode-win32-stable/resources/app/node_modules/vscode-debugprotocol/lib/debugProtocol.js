/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"debugProtocol.js","sourceRoot":"","sources":["../src/debugProtocol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;AAoxBZ","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n/** Declaration module describing the VS Code debug protocol\n */\nexport module DebugProtocol {\n\n\t/** Base class of requests, responses, and events. */\n\texport interface ProtocolMessage {\n\t\t/** Sequence number */\n\t\tseq: number;\n\t\t/** One of \"request\", \"response\", or \"event\" */\n\t\ttype: string;\n\t}\n\n\t/** Client-initiated request */\n\texport interface Request extends ProtocolMessage {\n\t\t/** The command to execute */\n\t\tcommand: string;\n\t\t/** Object containing arguments for the command */\n\t\targuments?: any;\n\t}\n\n\t/** Server-initiated event */\n\texport interface Event extends ProtocolMessage {\n\t\t/** Type of event */\n\t\tevent: string;\n\t\t/** Event-specific information */\n\t\tbody?: any;\n\t}\n\n\t/** Server-initiated response to client request */\n\texport interface Response extends ProtocolMessage {\n\t\t/** Sequence number of the corresponding request */\n\t\trequest_seq: number;\n\t\t/** Outcome of the request */\n\t\tsuccess: boolean;\n\t\t/** The command requested */\n\t\tcommand: string;\n\t\t/** Contains error message if success == false. */\n\t\tmessage?: string;\n\t\t/** Contains request result if success is true and optional error details if success is false. */\n\t\tbody?: any;\n\t}\n\n\t//---- Events\n\n\t/** Event message for \"initialized\" event type.\n\t\tThis event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).\n\t\tA debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the InitializeRequest has finished).\n\t\tThe sequence of events/requests is as follows:\n\t\t- adapters sends InitializedEvent (after the InitializeRequest has returned)\n\t\t- frontend sends zero or more SetBreakpointsRequest\n\t\t- frontend sends one SetFunctionBreakpointsRequest\n\t\t- frontend sends a SetExceptionBreakpointsRequest if one or more exceptionBreakpointFilters have been defined (or if supportsConfigurationDoneRequest is not defined or false)\n\t\t- frontend sends other future configuration requests\n\t\t- frontend sends one ConfigurationDoneRequest to indicate the end of the configuration\n\t*/\n\texport interface InitializedEvent extends Event {\n\t}\n\n\t/** Event message for \"stopped\" event type.\n\t\tThe event indicates that the execution of the debuggee has stopped due to some condition.\n\t\tThis can be caused by a break point previously set, a stepping action has completed, by executing a debugger statement etc.\n\t*/\n\texport interface StoppedEvent extends Event {\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'step', 'breakpoint', 'exception', 'pause'). This string is shown in the UI. */\n\t\t\treason: string;\n\t\t\t/** The thread which was stopped. */\n\t\t\tthreadId?: number;\n\t\t\t/** Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI. */\n\t\t\ttext?: string;\n\t\t\t/** If allThreadsStopped is true, a debug adapter can announce that all threads have stopped.\n\t\t\t *  The client should use this information to enable that all threads can be expanded to access their stacktraces.\n\t\t\t *  If the attribute is missing or false, only the thread with the given threadId can be expanded.\n\t\t\t **/\n\t\t\tallThreadsStopped?: boolean;\n\t\t};\n\t}\n\n\t/** Event message for \"exited\" event type.\n\t\tThe event indicates that the debuggee has exited.\n\t*/\n\texport interface ExitedEvent extends Event {\n\t\tbody: {\n\t\t\t/** The exit code returned from the debuggee. */\n\t\t\texitCode: number;\n\t\t};\n\t}\n\n\t/** Event message for \"terminated\" event types.\n\t\tThe event indicates that debugging of the debuggee has terminated.\n\t*/\n\texport interface TerminatedEvent extends Event {\n\t\tbody?: {\n\t\t\t/** A debug adapter may set 'restart' to true to request that the front end restarts the session. */\n\t\t\trestart?: boolean;\n\t\t}\n\t}\n\n\t/** Event message for \"thread\" event type.\n\t\tThe event indicates that a thread has started or exited.\n\t*/\n\texport interface ThreadEvent extends Event {\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'started', 'exited'). */\n\t\t\treason: string;\n\t\t\t/** The identifier of the thread. */\n\t\t\tthreadId: number;\n\t\t};\n\t}\n\n\t/** Event message for \"output\" event type.\n\t\tThe event indicates that the target has produced output.\n\t*/\n\texport interface OutputEvent extends Event {\n\t\tbody: {\n\t\t\t/** The category of output (such as: 'console', 'stdout', 'stderr', 'telemetry'). If not specified, 'console' is assumed. */\n\t\t\tcategory?: string;\n\t\t\t/** The output to report. */\n\t\t\toutput: string;\n\t\t\t/** Optional data to report. For the 'telemetry' category the data will be sent to telemetry, for the other categories the data is shown in JSON format. */\n\t\t\tdata?: any;\n\t\t};\n\t}\n\n\t/** Event message for \"breakpoint\" event type.\n\t\tThe event indicates that some information about a breakpoint has changed.\n\t*/\n\texport interface BreakpointEvent extends Event {\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'changed', 'new'). */\n\t\t\treason: string;\n\t\t\t/** The breakpoint. */\n\t\t\tbreakpoint: Breakpoint;\n\t\t}\n\t}\n\n\t/** Event message for \"module\" event type.\n\t\tThe event indicates that some information about a module has changed.\n\t */\n\texport interface ModuleEvent extends Event {\n\t\tbody: {\n\t\t\t/** The reason for the event. */\n\t\t\treason: 'new' | 'changed' | 'removed';\n\t\t\t/** The new, changed, or removed module. In case of 'removed' only the module id is used. */\n\t\t\tmodule: Module;\n\t\t}\n\t}\n\n\t//---- Requests\n\n\t/** On error that is whenever 'success' is false, the body can provide more details.\n\t */\n\texport interface ErrorResponse extends Response {\n\t\tbody: {\n\t\t\t/** An optional, structured error message. */\n\t\t\terror?: Message\n\t\t}\n\t}\n\n\t/** Initialize request; value of command field is \"initialize\".\n\t*/\n\texport interface InitializeRequest extends Request {\n\t\targuments: InitializeRequestArguments;\n\t}\n\t/** Arguments for \"initialize\" request. */\n\texport interface InitializeRequestArguments {\n\t\t/** The ID of the debugger adapter. Used to select or verify debugger adapter. */\n\t\tadapterID: string;\n\t\t/** If true all line numbers are 1-based (default). */\n\t\tlinesStartAt1?: boolean;\n\t\t/** If true all column numbers are 1-based (default). */\n\t\tcolumnsStartAt1?: boolean;\n\t\t/** Determines in what format paths are specified. Possible values are 'path' or 'uri'. The default is 'path', which is the native format. */\n\t\tpathFormat?: string;\n\t}\n\t/** Response to Initialize request. */\n\texport interface InitializeResponse extends Response {\n\t\t/** The capabilities of this debug adapter */\n\t\tbody?: Capabilites;\n\t}\n\n\t/** ConfigurationDone request; value of command field is \"configurationDone\".\n\t\tThe client of the debug protocol must send this request at the end of the sequence of configuration requests (which was started by the InitializedEvent)\n\t*/\n\texport interface ConfigurationDoneRequest extends Request {\n\t\targuments?: ConfigurationDoneArguments;\n\t}\n\t/** Arguments for \"configurationDone\" request. */\n\texport interface ConfigurationDoneArguments {\n\t\t/* The configurationDone request has no standardized attributes. */\n\t}\n\t/** Response to \"configurationDone\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface ConfigurationDoneResponse extends Response {\n\t}\n\n\t/** Launch request; value of command field is \"launch\".\n\t*/\n\texport interface LaunchRequest extends Request {\n\t\targuments: LaunchRequestArguments;\n\t}\n\t/** Arguments for \"launch\" request. */\n\texport interface LaunchRequestArguments {\n\t\t/* If noDebug is true the launch request should launch the program without enabling debugging. */\n\t\tnoDebug?: boolean;\n\t}\n\t/** Response to \"launch\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface LaunchResponse extends Response {\n\t}\n\n\t/** Attach request; value of command field is \"attach\".\n\t*/\n\texport interface AttachRequest extends Request {\n\t\targuments: AttachRequestArguments;\n\t}\n\t/** Arguments for \"attach\" request. */\n\texport interface AttachRequestArguments {\n\t\t/* The attach request has no standardized attributes. */\n\t}\n\t/** Response to \"attach\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface AttachResponse extends Response {\n\t}\n\n\t/** Disconnect request; value of command field is \"disconnect\".\n\t*/\n\texport interface DisconnectRequest extends Request {\n\t\targuments?: DisconnectArguments;\n\t}\n\t/** Arguments for \"disconnect\" request. */\n\texport interface DisconnectArguments {\n\t}\n\t/** Response to \"disconnect\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface DisconnectResponse extends Response {\n\t}\n\n\t/** SetBreakpoints request; value of command field is \"setBreakpoints\".\n\t\tSets multiple breakpoints for a single source and clears all previous breakpoints in that source.\n\t\tTo clear all breakpoint for a source, specify an empty array.\n\t\tWhen a breakpoint is hit, a StoppedEvent (event type 'breakpoint') is generated.\n\t*/\n\texport interface SetBreakpointsRequest extends Request {\n\t\targuments: SetBreakpointsArguments;\n\t}\n\t/** Arguments for \"setBreakpoints\" request. */\n\texport interface SetBreakpointsArguments {\n\t\t/** The source location of the breakpoints; either source.path or source.reference must be specified. */\n\t\tsource: Source;\n\t\t/** The code locations of the breakpoints. */\n\t\tbreakpoints?: SourceBreakpoint[];\n\t\t/** Deprecated: The code locations of the breakpoints. */\n\t\tlines?: number[];\n\t}\n\t/** Response to \"setBreakpoints\" request.\n\t\tReturned is information about each breakpoint created by this request.\n\t\tThis includes the actual code location and whether the breakpoint could be verified.\n\t\tThe breakpoints returned are in the same order as the elements of the 'breakpoints'\n\t\t(or the deprecated 'lines') in the SetBreakpointsArguments.\n\t*/\n\texport interface SetBreakpointsResponse extends Response {\n\t\tbody: {\n\t\t\t/** Information about the breakpoints. The array elements are in the same order as the elements of the 'breakpoints' (or the deprecated 'lines') in the SetBreakpointsArguments. */\n\t\t\tbreakpoints: Breakpoint[];\n\t\t};\n\t}\n\n\t/** SetFunctionBreakpoints request; value of command field is \"setFunctionBreakpoints\".\n\t\tSets multiple function breakpoints and clears all previous function breakpoints.\n\t\tTo clear all function breakpoint, specify an empty array.\n\t\tWhen a function breakpoint is hit, a StoppedEvent (event type 'function breakpoint') is generated.\n\t*/\n\texport interface SetFunctionBreakpointsRequest extends Request {\n\t\targuments: SetFunctionBreakpointsArguments;\n\t}\n\t/** Arguments for \"setFunctionBreakpoints\" request. */\n\texport interface SetFunctionBreakpointsArguments {\n\t\t/** The function names of the breakpoints. */\n\t\tbreakpoints: FunctionBreakpoint[];\n\t}\n\t/** Response to \"setFunctionBreakpoints\" request.\n\t\tReturned is information about each breakpoint created by this request.\n\t*/\n\texport interface SetFunctionBreakpointsResponse extends Response {\n\t\tbody: {\n\t\t\t/** Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array. */\n\t\t\tbreakpoints: Breakpoint[];\n\t\t};\n\t}\n\n\t/** SetExceptionBreakpoints request; value of command field is \"setExceptionBreakpoints\".\n\t\tEnable that the debuggee stops on exceptions with a StoppedEvent (event type 'exception').\n\t*/\n\texport interface SetExceptionBreakpointsRequest extends Request {\n\t\targuments: SetExceptionBreakpointsArguments;\n\t}\n\t/** Arguments for \"setExceptionBreakpoints\" request. */\n\texport interface SetExceptionBreakpointsArguments {\n\t\t/** Names of enabled exception breakpoints. */\n\t\tfilters: string[];\n\t}\n\t/** Response to \"setExceptionBreakpoints\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface SetExceptionBreakpointsResponse extends Response {\n\t}\n\n\t/** Continue request; value of command field is \"continue\".\n\t\tThe request starts the debuggee to run again.\n\t*/\n\texport interface ContinueRequest extends Request {\n\t\targuments: ContinueArguments;\n\t}\n\t/** Arguments for \"continue\" request. */\n\texport interface ContinueArguments {\n\t\t/** Continue execution for the specified thread (if possible). If the backend cannot continue on a single thread but will continue on all threads, it should set the allThreadsContinued attribute in the response to true. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"continue\" request. */\n\texport interface ContinueResponse extends Response {\n\t\tbody: {\n\t\t\t/** If true, the continue request has ignored the specified thread and continued all threads instead. If this attribute is missing a value of 'true' is assumed for backward compatibility. */\n\t\t\tallThreadsContinued?: boolean;\n\t\t};\n\t}\n\n\t/** Next request; value of command field is \"next\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter will respond with a StoppedEvent (event type 'step') after running the step.\n\t*/\n\texport interface NextRequest extends Request {\n\t\targuments: NextArguments;\n\t}\n\t/** Arguments for \"next\" request. */\n\texport interface NextArguments {\n\t\t/** Continue execution for this thread. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"next\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface NextResponse extends Response {\n\t}\n\n\t/** StepIn request; value of command field is \"stepIn\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter will respond with a StoppedEvent (event type 'step') after running the step.\n\t*/\n\texport interface StepInRequest extends Request {\n\t\targuments: StepInArguments;\n\t}\n\t/** Arguments for \"stepIn\" request. */\n\texport interface StepInArguments {\n\t\t/** Continue execution for this thread. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"stepIn\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepInResponse extends Response {\n\t}\n\n\t/** StepOut request; value of command field is \"stepOut\".\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter will respond with a StoppedEvent (event type 'step') after running the step.\n\t*/\n\texport interface StepOutRequest extends Request {\n\t\targuments: StepOutArguments;\n\t}\n\t/** Arguments for \"stepOut\" request. */\n\texport interface StepOutArguments {\n\t\t/** Continue execution for this thread. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"stepOut\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepOutResponse extends Response {\n\t}\n\n\t/** StepBack request; value of command field is \"stepBack\".\n\t\tThe request starts the debuggee to run one step backwards.\n\t\tThe debug adapter will respond with a StoppedEvent (event type 'step') after running the step.\n\t*/\n\texport interface StepBackRequest extends Request {\n\t\targuments: StepBackArguments;\n\t}\n\t/** Arguments for \"stepBack\" request. */\n\texport interface StepBackArguments {\n\t\t/** Continue execution for this thread. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"stepBack\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepBackResponse extends Response {\n\t}\n\n\t/** Pause request; value of command field is \"pause\".\n\t\tThe request suspenses the debuggee.\n\t\tpenDebug will respond with a StoppedEvent (event type 'pause') after a successful 'pause' command.\n\t*/\n\texport interface PauseRequest extends Request {\n\t\targuments: PauseArguments;\n\t}\n\t/** Arguments for \"pause\" request. */\n\texport interface PauseArguments {\n\t\t/** Pause execution for this thread. */\n\t\tthreadId: number;\n\t}\n\t/** Response to \"pause\" request. This is just an acknowledgement, so no body field is required. */\n\texport interface PauseResponse extends Response {\n\t}\n\n\t/** StackTrace request; value of command field is \"stackTrace\".\n\t\tThe request returns a stacktrace from the current execution state.\n\t*/\n\texport interface StackTraceRequest extends Request {\n\t\targuments: StackTraceArguments;\n\t}\n\t/** Arguments for \"stackTrace\" request. */\n\texport interface StackTraceArguments {\n\t\t/** Retrieve the stacktrace for this thread. */\n\t\tthreadId: number;\n\t\t/** The index of the first frame to return; if omitted frames start at 0. */\n\t\tstartFrame?: number;\n\t\t/** The maximum number of frames to return. If levels is not specified or 0, all frames are returned. */\n\t\tlevels?: number;\n\t}\n\t/** Response to \"stackTrace\" request. */\n\texport interface StackTraceResponse extends Response {\n\t\tbody: {\n\t\t\t/** The frames of the stackframe. If the array has length zero, there are no stackframes available.\n\t\t\t\tThis means that there is no location information available. */\n\t\t\tstackFrames: StackFrame[];\n\t\t\t/** The total number of frames available. */\n\t\t\ttotalFrames?: number;\n\t\t};\n\t}\n\n\t/** Scopes request; value of command field is \"scopes\".\n\t\tThe request returns the variable scopes for a given stackframe ID.\n\t*/\n\texport interface ScopesRequest extends Request {\n\t\targuments: ScopesArguments;\n\t}\n\t/** Arguments for \"scopes\" request. */\n\texport interface ScopesArguments {\n\t\t/** Retrieve the scopes for this stackframe. */\n\t\tframeId: number;\n\t}\n\t/** Response to \"scopes\" request. */\n\texport interface ScopesResponse extends Response {\n\t\tbody: {\n\t\t\t/** The scopes of the stackframe. If the array has length zero, there are no scopes available. */\n\t\t\tscopes: Scope[];\n\t\t};\n\t}\n\n\t/** Variables request; value of command field is \"variables\".\n\t\tRetrieves all children for the given variable reference.\n\t*/\n\texport interface VariablesRequest extends Request {\n\t\targuments: VariablesArguments;\n\t}\n\t/** Arguments for \"variables\" request. */\n\texport interface VariablesArguments {\n\t\t/** The Variable reference. */\n\t\tvariablesReference: number;\n\t}\n\t/** Response to \"variables\" request. */\n\texport interface VariablesResponse extends Response {\n\t\tbody: {\n\t\t\t/** All children for the given variable reference */\n\t\t\tvariables: Variable[];\n\t\t};\n\t}\n\n\t/** setVariable request; value of command field is \"setVariable\".\n\t\tSet the variable with the given name in the variable container to a new value.\n\t*/\n\texport interface SetVariableRequest extends Request {\n\t\targuments: SetVariableArguments;\n\t}\n\t/** Arguments for \"setVariable\" request. */\n\texport interface SetVariableArguments {\n\t\t/** The reference of the variable container. */\n\t\tvariablesReference: number;\n\t\t/** The name of the variable. */\n\t\tname: string;\n\t\t/** The value of the variable. */\n\t\tvalue: string;\n\t}\n\t/** Response to \"setVariable\" request. */\n\texport interface SetVariableResponse extends Response {\n\t\tbody: {\n\t\t\t/** the new value of the variable. */\n\t\t\tvalue: string;\n\t\t};\n\t}\n\n\t/** Source request; value of command field is \"source\".\n\t\tThe request retrieves the source code for a given source reference.\n\t*/\n\texport interface SourceRequest extends Request {\n\t\targuments: SourceArguments;\n\t}\n\t/** Arguments for \"source\" request. */\n\texport interface SourceArguments {\n\t\t/** The reference to the source. This is the value received in Source.reference. */\n\t\tsourceReference: number;\n\t}\n\t/** Response to \"source\" request. */\n\texport interface SourceResponse extends Response {\n\t\tbody: {\n\t\t\t/** Content of the source reference */\n\t\t\tcontent: string;\n\t\t};\n\t}\n\n\t/** Thread request; value of command field is \"threads\".\n\t\tThe request retrieves a list of all threads.\n\t*/\n\texport interface ThreadsRequest extends Request {\n\t}\n\t/** Response to \"threads\" request. */\n\texport interface ThreadsResponse extends Response {\n\t\tbody: {\n\t\t\t/** All threads. */\n\t\t\tthreads: Thread[];\n\t\t};\n\t}\n\n\t/**\n\t * Modules can be retrieved from the debug adapter with the ModulesRequest which can either return all modules or a range of modules to support paging.\n\t */\n\texport interface ModulesRequest extends Request {\n\t\targuments: ModulesArguments;\n\t}\n\t/** Arguments for \"modules\" request. */\n\texport interface ModulesArguments {\n\t\t/** The index of the first module to return; if omitted modules start at 0. */\n\t\tstartModule?: number;\n\t\t/** The number of modules to return. If moduleCount is not specified or 0, all modules are returned. */\n\t\tmoduleCount?: number;\n\t}\n\t/** Response to \"modules\" request. */\n\texport interface ModulesResponse extends Response {\n\t\tbody: {\n\t\t\t/** All modules or range of modules. */\n\t\t\tmodules: Module[];\n\t\t\t/** The total number of modules available. */\n\t\t\ttotalModules?: number;\n\t\t};\n\t}\n\n\t/** Evaluate request; value of command field is \"evaluate\".\n\t\tEvaluates the given expression in the context of the top most stack frame.\n\t\tThe expression has access to any variables and arguments that are in scope.\n\t*/\n\texport interface EvaluateRequest extends Request {\n\t\targuments: EvaluateArguments;\n\t}\n\t/** Arguments for \"evaluate\" request. */\n\texport interface EvaluateArguments {\n\t\t/** The expression to evaluate. */\n\t\texpression: string;\n\t\t/** Evaluate the expression in the scope of this stack frame. If not specified, the expression is evaluated in the global scope. */\n\t\tframeId?: number;\n\t\t/** The context in which the evaluate request is run. Possible values are 'watch' if evaluate is run in a watch, 'repl' if run from the REPL console, or 'hover' if run from a data hover. */\n\t\tcontext?: string;\n\t}\n\t/** Response to \"evaluate\" request. */\n\texport interface EvaluateResponse extends Response {\n\t\tbody: {\n\t\t\t/** The result of the evaluate. */\n\t\t\tresult: string;\n\t\t\t/** If variablesReference is > 0, the evaluate result is structured and its children can be retrieved by passing variablesReference to the VariablesRequest */\n\t\t\tvariablesReference: number;\n\t\t};\n\t}\n\n\t//---- Types\n\n\t/** Information about the capabilities of a debug adapter. */\n\texport interface Capabilites {\n\t\t/** The debug adapter supports the configurationDoneRequest. */\n\t\tsupportsConfigurationDoneRequest?: boolean;\n\t\t/** The debug adapter supports functionBreakpoints. */\n\t\tsupportsFunctionBreakpoints?: boolean;\n\t\t/** The debug adapter supports conditionalBreakpoints. */\n\t\tsupportsConditionalBreakpoints?: boolean;\n\t\t/** The debug adapter supports a (side effect free) evaluate request for data hovers. */\n\t\tsupportsEvaluateForHovers?: boolean;\n\t\t/** Available filters for the setExceptionBreakpoints request. */\n\t\texceptionBreakpointFilters?: ExceptionBreakpointsFilter[];\n\t\t/** The debug adapter supports stepping back. */\n\t\tsupportsStepBack?: boolean;\n\t\t/** The debug adapter supports setting a variable to a value. */\n\t\tsupportsSetVariable?: boolean;\n\t}\n\n\t/** An ExceptionBreakpointsFilter is shown in the UI as an option for configuring how exceptions are dealt with. */\n\texport interface ExceptionBreakpointsFilter {\n\t\t/** The internal ID of the filter. This value is passed to the setExceptionBreakpoints request. */\n\t\tfilter: string,\n\t\t/** The name of the filter. This will be shown in the UI. */\n\t\tlabel: string,\n\t\t/** Initial value of the filter. If not specified a value 'false' is assumed. */\n\t\tdefault?: boolean\n\t}\n\n\t/** A structured message object. Used to return errors from requests. */\n\texport interface Message {\n\t\t/** Unique identifier for the message. */\n\t\tid: number;\n\t\t/** A format string for the message. Embedded variables have the form '{name}'.\n\t\t    If variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes. */\n\t\tformat: string;\n\t\t/** An object used as a dictionary for looking up the variables in the format string. */\n\t\tvariables?: { [key: string]: string };\n\t\t/** if true send to telemetry */\n\t\tsendTelemetry?: boolean;\n\t\t/** if true show user */\n\t\tshowUser?: boolean;\n\t\t/** An optional url where additional information about this message can be found. */\n\t\turl?: string;\n\t\t/** An optional label that is presented to the user as the UI for opening the url. */\n\t\turlLabel?: string;\n\t}\n\n\t/**\n\t * A Module object represents a row in the modules view.\n\t * Two attributes are mandatory: an id identifies a module in the modules view and is used in a ModuleEvent for identifying a module for adding, updating or deleting.\n\t * The name is used to minimally render the module in the UI.\n\t *\n\t * Additional attributes can be added to the module. They will show up in the module View if they have a corresponding ColumnDescriptor.\n\t *\n\t * To avoid an unnecessary proliferation of additional attributes with similar semantics but different names\n\t * we recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found.\n\t */\n\texport interface Module {\n\t\t/** Unique identifier for the module. */\n\t\tid: number | string;\n\t\t/** A name of the module. */\n\t\tname: string;\n\n\t\t// optional but recommended attributes.\n\t\t// always try to use these first before introducing additional attributes.\n\n\t\t/** Logical full path to the module. The exact definition is implementation defined, but usually this would be a full path to the on-disk file for the module. */\n\t\tpath?: string\n\t\t/** True if the module is optimized. */\n\t\tisOptimized?: boolean\n\t\t/** True if the module is considered 'user code' by a debugger that supports 'Just My Code'. */\n\t\tisUserCode?: boolean\n\t\t/** Version of Module. */\n\t\tversion? : string\n\t\t/** User understandable description of if symbols were found for the module (ex: 'Symbols Loaded', 'Symbols not found', etc */\n\t\tsymbolStatus?: string\n\t\t/** Logical full path to the symbol file. The exact definition is implementation defined. */\n\t\tsymbolFilePath?: string\n\t\t/** Module created or modified. */\n\t\tdateTimeStamp?: string\n\t\t/** Address range covered by this module. */\n\t\taddressRange?: string\n\t}\n\n\t/**\n\t * A ColumnDescriptor specifies what module attribute to show in a column of the ModulesView, how to format it, and what the column's label should be.\n\t * It is only used if the underlying UI actually supports this level of customization.\n\t */\n\texport interface ColumnDescriptor {\n\t\t/** Name of the attribute rendered in this column. */\n\t\tattributeName: string;\n\t\t/** Header UI label of column. */\n\t\tlabel: string;\n\t\t/** Format to use for the rendered values in this column. TBD how the format strings looks like. */\n\t\tformat: string;\n\t\t/** Width of this column in characters (hint only). */\n\t\twidth: number;\n\t}\n\n\t/**\n\t * The ModulesViewDescriptor is the container for all declarative configuration options of a ModuleView.\n\t * For now it only specifies the columns to be shown in the modules view.\n\t */\n\texport interface ModulesViewDescriptor {\n\t\tcolumns: ColumnDescriptor[];\n\t}\n\n\t/** A Thread */\n\texport interface Thread {\n\t\t/** Unique identifier for the thread. */\n\t\tid: number;\n\t\t/** A name of the thread. */\n\t\tname: string;\n\t}\n\n\t/** A Source is a descriptor for source code. It is returned from the debug adapter as part of a StackFrame and it is used by clients when specifying breakpoints. */\n\texport interface Source {\n\t\t/** The short name of the source. Every source returned from the debug adapter has a name. When specifying a source to the debug adapter this name is optional. */\n\t\tname?: string;\n\t\t/** The long (absolute) path of the source. It is not guaranteed that the source exists at this location. */\n\t\tpath?: string;\n\t\t/** If sourceReference > 0 the contents of the source can be retrieved through the SourceRequest. A sourceReference is only valid for a session, so it must not be used to persist a source. */\n\t\tsourceReference?: number;\n\t\t/** The (optional) origin of this source: possible values \"internal module\", \"inlined content from source map\", etc. */\n\t\torigin?: string;\n\t\t/** Optional data that a debug adapter might want to loop through the client. The client should leave the data intact and persist it across sessions. The client should not interpret the data. */\n\t\tadapterData?: any;\n\t}\n\n\t/** A Stackframe contains the source location. */\n\texport interface StackFrame {\n\t\t/** An identifier for the stack frame. This id can be used to retrieve the scopes of the frame with the 'scopesRequest'. */\n\t\tid: number;\n\t\t/** The name of the stack frame, typically a method name */\n\t\tname: string;\n\t\t/** The optional source of the frame. */\n\t\tsource?: Source;\n\t\t/** The line within the file of the frame. If source is null or doesn't exist, line is 0 and must be ignored. */\n\t\tline: number;\n\t\t/** The column within the line. If source is null or doesn't exist, column is 0 and must be ignored. */\n\t\tcolumn: number;\n\t\t/** An optional end line of the range covered by the stack frame. */\n\t\tendLine?: number;\n\t\t/** An optional end column of the range covered by the stack frame. */\n\t\tendColumn?: number;\n\t}\n\n\t/** A Scope is a named container for variables. */\n\texport interface Scope {\n\t\t/** name of the scope (as such 'Arguments', 'Locals') */\n\t\tname: string;\n\t\t/** The variables of this scope can be retrieved by passing the value of variablesReference to the VariablesRequest. */\n\t\tvariablesReference: number;\n\t\t/** If true, the number of variables in this scope is large or expensive to retrieve. */\n\t\texpensive: boolean;\n\t}\n\n\t/** A Variable is a name/value pair.\n\t\tOptionally a variable can have a 'type' that is shown if space permits or when hovering over the variable's name.\n\t\tAn optional 'kind' is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.\n\t\tIf the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.\n\t*/\n\texport interface Variable {\n\t\t/** The variable's name. */\n\t\tname: string;\n\t\t/** The variable's type. */\n\t\ttype?: string;\n\t\t/** The variable's value. For structured objects this can be a multi line text, e.g. for a function the body of a function. */\n\t\tvalue: string;\n\t\t/** If variablesReference is > 0, the variable is structured and its children can be retrieved by passing variablesReference to the VariablesRequest. */\n\t\tvariablesReference: number;\n\t\t/** Properties of a variable that can be used to determine how to render the variable in the UI. Format of the string value: TBD. */\n\t\tkind?: string;\n\t}\n\n\t/** Properties of a breakpoint passed to the setBreakpoints request.\n\t*/\n\texport interface SourceBreakpoint {\n\t\t/** The source line of the breakpoint. */\n\t\tline: number;\n\t\t/** An optional source column of the breakpoint. */\n\t\tcolumn?: number;\n\t\t/** An optional expression for conditional breakpoints. */\n\t\tcondition?: string;\n\t}\n\n\t/** Properties of a breakpoint passed to the setFunctionBreakpoints request.\n\t*/\n\texport interface FunctionBreakpoint {\n\t\t/** The name of the function. */\n\t\tname: string;\n\t\t/** An optional expression for conditional breakpoints. */\n\t\tcondition?: string;\n\t}\n\n\t/** Information about a Breakpoint created in setBreakpoints or setFunctionBreakpoints.\n\t*/\n\texport interface Breakpoint {\n\t\t/** An optional unique identifier for the breakpoint. */\n\t\tid?: number;\n\t\t/** If true breakpoint could be set (but not necessarily at the desired location).  */\n\t\tverified: boolean;\n\t\t/** An optional message about the state of the breakpoint. This is shown to the user and can be used to explain why a breakpoint could not be verified. */\n\t\tmessage?: string;\n\t\t/** The source where the breakpoint is located. */\n\t\tsource?: Source;\n\t\t/** The start line of the actual range covered by the breakpoint. */\n\t\tline?: number;\n\t\t/** An optional start column of the actual range covered by the breakpoint. */\n\t\tcolumn?: number;\n\t\t/** An optional end line of the actual range covered by the breakpoint. */\n\t\tendLine?: number;\n\t\t/**  An optional end column of the actual range covered by the breakpoint. If no end line is given, then the end column is assumed to be in the start line. */\n\t\tendColumn?: number;\n\t}\n}\n"]}